/*
 * Generated by Bluespec Compiler (build 102a30c)
 * 
 * On Mon Feb  1 21:37:17 PST 2021
 * 
 */

/* Generation options: */
#ifndef __mkProcessor_h__
#define __mkProcessor_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkProcessor module */
class MOD_mkProcessor : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_cycles;
  MOD_Fifo<tUWide> INST_d2e;
  MOD_Fifo<tUInt64> INST_dmemReqQ;
  MOD_Fifo<tUInt32> INST_dmemRespQ;
  MOD_Fifo<tUWide> INST_e2m;
  MOD_Fifo<tUInt32> INST_f2d;
  MOD_Fifo<tUInt64> INST_imemReqQ;
  MOD_Fifo<tUInt32> INST_imemRespQ;
  MOD_Reg<tUInt32> INST_instCnt;
  MOD_Reg<tUInt32> INST_pc;
  MOD_Reg<tUInt32> INST_rf_rfile_0;
  MOD_Reg<tUInt32> INST_rf_rfile_1;
  MOD_Reg<tUInt32> INST_rf_rfile_10;
  MOD_Reg<tUInt32> INST_rf_rfile_11;
  MOD_Reg<tUInt32> INST_rf_rfile_12;
  MOD_Reg<tUInt32> INST_rf_rfile_13;
  MOD_Reg<tUInt32> INST_rf_rfile_14;
  MOD_Reg<tUInt32> INST_rf_rfile_15;
  MOD_Reg<tUInt32> INST_rf_rfile_16;
  MOD_Reg<tUInt32> INST_rf_rfile_17;
  MOD_Reg<tUInt32> INST_rf_rfile_18;
  MOD_Reg<tUInt32> INST_rf_rfile_19;
  MOD_Reg<tUInt32> INST_rf_rfile_2;
  MOD_Reg<tUInt32> INST_rf_rfile_20;
  MOD_Reg<tUInt32> INST_rf_rfile_21;
  MOD_Reg<tUInt32> INST_rf_rfile_22;
  MOD_Reg<tUInt32> INST_rf_rfile_23;
  MOD_Reg<tUInt32> INST_rf_rfile_24;
  MOD_Reg<tUInt32> INST_rf_rfile_25;
  MOD_Reg<tUInt32> INST_rf_rfile_26;
  MOD_Reg<tUInt32> INST_rf_rfile_27;
  MOD_Reg<tUInt32> INST_rf_rfile_28;
  MOD_Reg<tUInt32> INST_rf_rfile_29;
  MOD_Reg<tUInt32> INST_rf_rfile_3;
  MOD_Reg<tUInt32> INST_rf_rfile_30;
  MOD_Reg<tUInt32> INST_rf_rfile_31;
  MOD_Reg<tUInt32> INST_rf_rfile_4;
  MOD_Reg<tUInt32> INST_rf_rfile_5;
  MOD_Reg<tUInt32> INST_rf_rfile_6;
  MOD_Reg<tUInt32> INST_rf_rfile_7;
  MOD_Reg<tUInt32> INST_rf_rfile_8;
  MOD_Reg<tUInt32> INST_rf_rfile_9;
  MOD_Reg<tUInt8> INST_stage;
 
 /* Constructor */
 public:
  MOD_mkProcessor(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUWide DEF_d2e_first____d293;
  tUWide DEF_e2m_first____d439;
  tUInt8 DEF_d2e_first__93_BITS_125_TO_122___d294;
  tUInt8 DEF_e2m_first__39_BIT_35___d440;
  tUInt8 DEF_d2e_first__93_BITS_125_TO_122_94_EQ_6___d295;
  tUInt8 DEF_d2e_first__93_BITS_125_TO_122_94_EQ_7___d297;
 
 /* Local definitions */
 private:
  tUInt32 DEF_x__h6520;
  tUInt32 DEF_x__h118;
  tUWide DEF_IF_d2e_first__93_BIT_114_29_THEN_d2e_first__93_ETC___d432;
  tUWide DEF_d2e_first__93_BITS_157_TO_126_08_CONCAT_d2e_fi_ETC___d431;
  tUWide DEF_d2e_first__93_BITS_157_TO_126_08_CONCAT_0_CONC_ETC___d428;
  tUWide DEF_IF_d2e_first__93_BITS_125_TO_122_94_EQ_6_95_TH_ETC___d434;
  tUWide DEF_d2e_first__93_BITS_157_TO_126_08_CONCAT_d2e_fi_ETC___d427;
  tUWide DEF_f2d_first__0_CONCAT_IF_imemRespQ_first__1_BITS_ETC___d290;
 
 /* Rules */
 public:
  void RL_incCycle();
  void RL_doFetch();
  void RL_doDecode();
  void RL_doExecute();
  void RL_doWriteback();
 
 /* Methods */
 public:
  tUInt64 METH_iMemReq();
  tUInt8 METH_RDY_iMemReq();
  void METH_iMemResp(tUInt32 ARG_iMemResp_data);
  tUInt8 METH_RDY_iMemResp();
  tUInt64 METH_dMemReq();
  tUInt8 METH_RDY_dMemReq();
  void METH_dMemResp(tUInt32 ARG_dMemResp_data);
  tUInt8 METH_RDY_dMemResp();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkProcessor &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkProcessor &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkProcessor &backing);
};

#endif /* ifndef __mkProcessor_h__ */
