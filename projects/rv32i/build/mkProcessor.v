//
// Generated by Bluespec Compiler (build 102a30c)
//
// On Mon Feb  1 21:39:03 PST 2021
//
//
// Ports:
// Name                         I/O  size props
// iMemReq                        O    51 reg
// RDY_iMemReq                    O     1 reg
// RDY_iMemResp                   O     1 reg
// dMemReq                        O    51 reg
// RDY_dMemReq                    O     1 reg
// RDY_dMemResp                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// iMemResp_data                  I    32 reg
// dMemResp_data                  I    32 reg
// EN_iMemResp                    I     1
// EN_dMemResp                    I     1
// EN_iMemReq                     I     1
// EN_dMemReq                     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkProcessor(CLK,
		   RST_N,

		   EN_iMemReq,
		   iMemReq,
		   RDY_iMemReq,

		   iMemResp_data,
		   EN_iMemResp,
		   RDY_iMemResp,

		   EN_dMemReq,
		   dMemReq,
		   RDY_dMemReq,

		   dMemResp_data,
		   EN_dMemResp,
		   RDY_dMemResp);
  input  CLK;
  input  RST_N;

  // actionvalue method iMemReq
  input  EN_iMemReq;
  output [50 : 0] iMemReq;
  output RDY_iMemReq;

  // action method iMemResp
  input  [31 : 0] iMemResp_data;
  input  EN_iMemResp;
  output RDY_iMemResp;

  // actionvalue method dMemReq
  input  EN_dMemReq;
  output [50 : 0] dMemReq;
  output RDY_dMemReq;

  // action method dMemResp
  input  [31 : 0] dMemResp_data;
  input  EN_dMemResp;
  output RDY_dMemResp;

  // signals for module outputs
  wire [50 : 0] dMemReq, iMemReq;
  wire RDY_dMemReq, RDY_dMemResp, RDY_iMemReq, RDY_iMemResp;

  // register cycles
  reg [31 : 0] cycles;
  wire [31 : 0] cycles_D_IN;
  wire cycles_EN;

  // register instCnt
  reg [31 : 0] instCnt;
  wire [31 : 0] instCnt_D_IN;
  wire instCnt_EN;

  // register pc
  reg [31 : 0] pc;
  reg [31 : 0] pc_D_IN;
  wire pc_EN;

  // register rf_rfile_0
  reg [31 : 0] rf_rfile_0;
  wire [31 : 0] rf_rfile_0_D_IN;
  wire rf_rfile_0_EN;

  // register rf_rfile_1
  reg [31 : 0] rf_rfile_1;
  wire [31 : 0] rf_rfile_1_D_IN;
  wire rf_rfile_1_EN;

  // register rf_rfile_10
  reg [31 : 0] rf_rfile_10;
  wire [31 : 0] rf_rfile_10_D_IN;
  wire rf_rfile_10_EN;

  // register rf_rfile_11
  reg [31 : 0] rf_rfile_11;
  wire [31 : 0] rf_rfile_11_D_IN;
  wire rf_rfile_11_EN;

  // register rf_rfile_12
  reg [31 : 0] rf_rfile_12;
  wire [31 : 0] rf_rfile_12_D_IN;
  wire rf_rfile_12_EN;

  // register rf_rfile_13
  reg [31 : 0] rf_rfile_13;
  wire [31 : 0] rf_rfile_13_D_IN;
  wire rf_rfile_13_EN;

  // register rf_rfile_14
  reg [31 : 0] rf_rfile_14;
  wire [31 : 0] rf_rfile_14_D_IN;
  wire rf_rfile_14_EN;

  // register rf_rfile_15
  reg [31 : 0] rf_rfile_15;
  wire [31 : 0] rf_rfile_15_D_IN;
  wire rf_rfile_15_EN;

  // register rf_rfile_16
  reg [31 : 0] rf_rfile_16;
  wire [31 : 0] rf_rfile_16_D_IN;
  wire rf_rfile_16_EN;

  // register rf_rfile_17
  reg [31 : 0] rf_rfile_17;
  wire [31 : 0] rf_rfile_17_D_IN;
  wire rf_rfile_17_EN;

  // register rf_rfile_18
  reg [31 : 0] rf_rfile_18;
  wire [31 : 0] rf_rfile_18_D_IN;
  wire rf_rfile_18_EN;

  // register rf_rfile_19
  reg [31 : 0] rf_rfile_19;
  wire [31 : 0] rf_rfile_19_D_IN;
  wire rf_rfile_19_EN;

  // register rf_rfile_2
  reg [31 : 0] rf_rfile_2;
  wire [31 : 0] rf_rfile_2_D_IN;
  wire rf_rfile_2_EN;

  // register rf_rfile_20
  reg [31 : 0] rf_rfile_20;
  wire [31 : 0] rf_rfile_20_D_IN;
  wire rf_rfile_20_EN;

  // register rf_rfile_21
  reg [31 : 0] rf_rfile_21;
  wire [31 : 0] rf_rfile_21_D_IN;
  wire rf_rfile_21_EN;

  // register rf_rfile_22
  reg [31 : 0] rf_rfile_22;
  wire [31 : 0] rf_rfile_22_D_IN;
  wire rf_rfile_22_EN;

  // register rf_rfile_23
  reg [31 : 0] rf_rfile_23;
  wire [31 : 0] rf_rfile_23_D_IN;
  wire rf_rfile_23_EN;

  // register rf_rfile_24
  reg [31 : 0] rf_rfile_24;
  wire [31 : 0] rf_rfile_24_D_IN;
  wire rf_rfile_24_EN;

  // register rf_rfile_25
  reg [31 : 0] rf_rfile_25;
  wire [31 : 0] rf_rfile_25_D_IN;
  wire rf_rfile_25_EN;

  // register rf_rfile_26
  reg [31 : 0] rf_rfile_26;
  wire [31 : 0] rf_rfile_26_D_IN;
  wire rf_rfile_26_EN;

  // register rf_rfile_27
  reg [31 : 0] rf_rfile_27;
  wire [31 : 0] rf_rfile_27_D_IN;
  wire rf_rfile_27_EN;

  // register rf_rfile_28
  reg [31 : 0] rf_rfile_28;
  wire [31 : 0] rf_rfile_28_D_IN;
  wire rf_rfile_28_EN;

  // register rf_rfile_29
  reg [31 : 0] rf_rfile_29;
  wire [31 : 0] rf_rfile_29_D_IN;
  wire rf_rfile_29_EN;

  // register rf_rfile_3
  reg [31 : 0] rf_rfile_3;
  wire [31 : 0] rf_rfile_3_D_IN;
  wire rf_rfile_3_EN;

  // register rf_rfile_30
  reg [31 : 0] rf_rfile_30;
  wire [31 : 0] rf_rfile_30_D_IN;
  wire rf_rfile_30_EN;

  // register rf_rfile_31
  reg [31 : 0] rf_rfile_31;
  wire [31 : 0] rf_rfile_31_D_IN;
  wire rf_rfile_31_EN;

  // register rf_rfile_4
  reg [31 : 0] rf_rfile_4;
  wire [31 : 0] rf_rfile_4_D_IN;
  wire rf_rfile_4_EN;

  // register rf_rfile_5
  reg [31 : 0] rf_rfile_5;
  wire [31 : 0] rf_rfile_5_D_IN;
  wire rf_rfile_5_EN;

  // register rf_rfile_6
  reg [31 : 0] rf_rfile_6;
  wire [31 : 0] rf_rfile_6_D_IN;
  wire rf_rfile_6_EN;

  // register rf_rfile_7
  reg [31 : 0] rf_rfile_7;
  wire [31 : 0] rf_rfile_7_D_IN;
  wire rf_rfile_7_EN;

  // register rf_rfile_8
  reg [31 : 0] rf_rfile_8;
  wire [31 : 0] rf_rfile_8_D_IN;
  wire rf_rfile_8_EN;

  // register rf_rfile_9
  reg [31 : 0] rf_rfile_9;
  wire [31 : 0] rf_rfile_9_D_IN;
  wire rf_rfile_9_EN;

  // register stage
  reg [1 : 0] stage;
  reg [1 : 0] stage_D_IN;
  wire stage_EN;

  // ports of submodule d2e
  wire [157 : 0] d2e_D_IN, d2e_D_OUT;
  wire d2e_CLR, d2e_DEQ, d2e_EMPTY_N, d2e_ENQ, d2e_FULL_N;

  // ports of submodule dmemReqQ
  wire [50 : 0] dmemReqQ_D_IN, dmemReqQ_D_OUT;
  wire dmemReqQ_CLR,
       dmemReqQ_DEQ,
       dmemReqQ_EMPTY_N,
       dmemReqQ_ENQ,
       dmemReqQ_FULL_N;

  // ports of submodule dmemRespQ
  wire [31 : 0] dmemRespQ_D_IN, dmemRespQ_D_OUT;
  wire dmemRespQ_CLR,
       dmemRespQ_DEQ,
       dmemRespQ_EMPTY_N,
       dmemRespQ_ENQ,
       dmemRespQ_FULL_N;

  // ports of submodule e2m
  reg [72 : 0] e2m_D_IN;
  wire [72 : 0] e2m_D_OUT;
  wire e2m_CLR, e2m_DEQ, e2m_EMPTY_N, e2m_ENQ, e2m_FULL_N;

  // ports of submodule f2d
  wire [31 : 0] f2d_D_IN, f2d_D_OUT;
  wire f2d_CLR, f2d_DEQ, f2d_EMPTY_N, f2d_ENQ, f2d_FULL_N;

  // ports of submodule imemReqQ
  wire [50 : 0] imemReqQ_D_IN, imemReqQ_D_OUT;
  wire imemReqQ_CLR,
       imemReqQ_DEQ,
       imemReqQ_EMPTY_N,
       imemReqQ_ENQ,
       imemReqQ_FULL_N;

  // ports of submodule imemRespQ
  wire [31 : 0] imemRespQ_D_IN, imemRespQ_D_OUT;
  wire imemRespQ_CLR,
       imemRespQ_DEQ,
       imemRespQ_EMPTY_N,
       imemRespQ_ENQ,
       imemRespQ_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_doDecode,
       WILL_FIRE_RL_doExecute,
       WILL_FIRE_RL_doFetch,
       WILL_FIRE_RL_doWriteback;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_stage_write_1__VAL_1;

  // remaining internal signals
  reg [31 : 0] CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_immI094_ETC__q22,
	       dInst_imm__h3676,
	       data__h6326,
	       data__h6328,
	       eInst_addr__h6249,
	       eInst_data__h6248,
	       v__h7675,
	       x__h5074,
	       x__h6093;
  reg [4 : 0] CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q1,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q11,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q12,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q13,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q15,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q16,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q17,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q19,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q3,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q4,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q5,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q6,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q8,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q9,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q14,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q18,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q7,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q10,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q2,
	      x__h4163,
	      x__h4220,
	      x__h4285;
  reg [3 : 0] CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b101_ETC__q34,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_0_ETC__q33,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_1_0b1_I_ETC__q31,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_2_0b1_2_ETC__q36,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_6_0b1_6_ETC__q29,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_7_0b1_7_ETC__q32,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_1_0b100_ETC__q30,
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q35,
	      CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37;
  reg [2 : 0] CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27;
  reg [1 : 0] CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_1_ETC__q25,
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b1_1_0b10_3_0__q26;
  reg CASE_imemRespQD_OUT_BITS_6_TO_0_0b10011_imemR_ETC__q28,
      IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332;
  wire [53 : 0] IF_imemRespQ_first__1_BITS_6_TO_0_2_EQ_0b11001_ETC___d252;
  wire [39 : 0] IF_imemRespQ_first__1_BITS_6_TO_0_2_EQ_0b11001_ETC___d250;
  wire [31 : 0] addr__h6482,
		d2eD_OUT_BITS_63_TO_32__q21,
		d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334,
		dw___1__h7719,
		dw___1__h7745,
		dw___1__h7776,
		dw___1__h7801,
		immB__h3096,
		immI__h3094,
		immJ__h3098,
		immS__h3095,
		immU__h3097,
		nextPc__h6235,
		nextPc__h6330,
		nextPc__h6466,
		v__h7646;
  wire [20 : 0] x__h4538;
  wire [15 : 0] dmemRespQD_OUT_BITS_15_TO_0__q24;
  wire [12 : 0] x__h4426;
  wire [11 : 0] imemRespQD_OUT_BITS_31_TO_20__q20, x__h4632;
  wire [7 : 0] dmemRespQD_OUT_BITS_7_TO_0__q23;
  wire [3 : 0] IF_imemRespQ_first__1_BITS_14_TO_12_6_EQ_0b101_ETC___d104;
  wire d2e_first__93_BITS_63_TO_32_13_EQ_d2e_first__9_ETC___d315,
       d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319,
       d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321,
       e2m_i_notFull__92_AND_IF_d2e_first__93_BITS_12_ETC___d301;

  // actionvalue method iMemReq
  assign iMemReq = imemReqQ_D_OUT ;
  assign RDY_iMemReq = imemReqQ_EMPTY_N ;

  // action method iMemResp
  assign RDY_iMemResp = imemRespQ_FULL_N ;

  // actionvalue method dMemReq
  assign dMemReq = dmemReqQ_D_OUT ;
  assign RDY_dMemReq = dmemReqQ_EMPTY_N ;

  // action method dMemResp
  assign RDY_dMemResp = dmemRespQ_FULL_N ;

  // submodule d2e
  FIFO2 #(.width(32'd158), .guarded(1'd1)) d2e(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(d2e_D_IN),
					       .ENQ(d2e_ENQ),
					       .DEQ(d2e_DEQ),
					       .CLR(d2e_CLR),
					       .D_OUT(d2e_D_OUT),
					       .FULL_N(d2e_FULL_N),
					       .EMPTY_N(d2e_EMPTY_N));

  // submodule dmemReqQ
  FIFO2 #(.width(32'd51), .guarded(1'd1)) dmemReqQ(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(dmemReqQ_D_IN),
						   .ENQ(dmemReqQ_ENQ),
						   .DEQ(dmemReqQ_DEQ),
						   .CLR(dmemReqQ_CLR),
						   .D_OUT(dmemReqQ_D_OUT),
						   .FULL_N(dmemReqQ_FULL_N),
						   .EMPTY_N(dmemReqQ_EMPTY_N));

  // submodule dmemRespQ
  FIFO2 #(.width(32'd32), .guarded(1'd1)) dmemRespQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(dmemRespQ_D_IN),
						    .ENQ(dmemRespQ_ENQ),
						    .DEQ(dmemRespQ_DEQ),
						    .CLR(dmemRespQ_CLR),
						    .D_OUT(dmemRespQ_D_OUT),
						    .FULL_N(dmemRespQ_FULL_N),
						    .EMPTY_N(dmemRespQ_EMPTY_N));

  // submodule e2m
  FIFO2 #(.width(32'd73), .guarded(1'd1)) e2m(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(e2m_D_IN),
					      .ENQ(e2m_ENQ),
					      .DEQ(e2m_DEQ),
					      .CLR(e2m_CLR),
					      .D_OUT(e2m_D_OUT),
					      .FULL_N(e2m_FULL_N),
					      .EMPTY_N(e2m_EMPTY_N));

  // submodule f2d
  FIFO2 #(.width(32'd32), .guarded(1'd1)) f2d(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(f2d_D_IN),
					      .ENQ(f2d_ENQ),
					      .DEQ(f2d_DEQ),
					      .CLR(f2d_CLR),
					      .D_OUT(f2d_D_OUT),
					      .FULL_N(f2d_FULL_N),
					      .EMPTY_N(f2d_EMPTY_N));

  // submodule imemReqQ
  FIFO2 #(.width(32'd51), .guarded(1'd1)) imemReqQ(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(imemReqQ_D_IN),
						   .ENQ(imemReqQ_ENQ),
						   .DEQ(imemReqQ_DEQ),
						   .CLR(imemReqQ_CLR),
						   .D_OUT(imemReqQ_D_OUT),
						   .FULL_N(imemReqQ_FULL_N),
						   .EMPTY_N(imemReqQ_EMPTY_N));

  // submodule imemRespQ
  FIFO2 #(.width(32'd32), .guarded(1'd1)) imemRespQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(imemRespQ_D_IN),
						    .ENQ(imemRespQ_ENQ),
						    .DEQ(imemRespQ_DEQ),
						    .CLR(imemRespQ_CLR),
						    .D_OUT(imemRespQ_D_OUT),
						    .FULL_N(imemRespQ_FULL_N),
						    .EMPTY_N(imemRespQ_EMPTY_N));

  // rule RL_doFetch
  assign WILL_FIRE_RL_doFetch =
	     imemReqQ_FULL_N && f2d_FULL_N && stage == 2'd0 ;

  // rule RL_doDecode
  assign WILL_FIRE_RL_doDecode =
	     f2d_EMPTY_N && imemRespQ_EMPTY_N && d2e_FULL_N && stage == 2'd1 ;

  // rule RL_doExecute
  assign WILL_FIRE_RL_doExecute =
	     d2e_EMPTY_N &&
	     e2m_i_notFull__92_AND_IF_d2e_first__93_BITS_12_ETC___d301 &&
	     stage == 2'd2 ;

  // rule RL_doWriteback
  assign WILL_FIRE_RL_doWriteback =
	     e2m_EMPTY_N && (!e2m_D_OUT[35] || dmemRespQ_EMPTY_N) &&
	     stage == 2'd3 ;

  // inputs to muxes for submodule ports
  always@(d2e_D_OUT)
  begin
    case (d2e_D_OUT[125:122])
      4'd6: MUX_stage_write_1__VAL_1 = 2'd3;
      4'd7: MUX_stage_write_1__VAL_1 = 2'd0;
      default: MUX_stage_write_1__VAL_1 = d2e_D_OUT[114] ? 2'd3 : 2'd0;
    endcase
  end

  // register cycles
  assign cycles_D_IN = cycles + 32'd1 ;
  assign cycles_EN = 1'd1 ;

  // register instCnt
  assign instCnt_D_IN = instCnt + 32'd1 ;
  assign instCnt_EN = WILL_FIRE_RL_doExecute ;

  // register pc
  always@(d2e_D_OUT or
	  nextPc__h6235 or
	  nextPc__h6330 or
	  d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334 or
	  nextPc__h6466)
  begin
    case (d2e_D_OUT[125:122])
      4'd0, 4'd1, 4'd3: pc_D_IN = nextPc__h6235;
      4'd2: pc_D_IN = nextPc__h6330;
      4'd4:
	  pc_D_IN = d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334;
      4'd5: pc_D_IN = nextPc__h6466;
      default: pc_D_IN = nextPc__h6235;
    endcase
  end
  assign pc_EN = WILL_FIRE_RL_doExecute ;

  // register rf_rfile_0
  assign rf_rfile_0_D_IN = v__h7646 ;
  assign rf_rfile_0_EN = 1'b0 ;

  // register rf_rfile_1
  assign rf_rfile_1_D_IN = v__h7646 ;
  assign rf_rfile_1_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd1 ;

  // register rf_rfile_10
  assign rf_rfile_10_D_IN = v__h7646 ;
  assign rf_rfile_10_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd10 ;

  // register rf_rfile_11
  assign rf_rfile_11_D_IN = v__h7646 ;
  assign rf_rfile_11_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd11 ;

  // register rf_rfile_12
  assign rf_rfile_12_D_IN = v__h7646 ;
  assign rf_rfile_12_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd12 ;

  // register rf_rfile_13
  assign rf_rfile_13_D_IN = v__h7646 ;
  assign rf_rfile_13_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd13 ;

  // register rf_rfile_14
  assign rf_rfile_14_D_IN = v__h7646 ;
  assign rf_rfile_14_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd14 ;

  // register rf_rfile_15
  assign rf_rfile_15_D_IN = v__h7646 ;
  assign rf_rfile_15_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd15 ;

  // register rf_rfile_16
  assign rf_rfile_16_D_IN = v__h7646 ;
  assign rf_rfile_16_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd16 ;

  // register rf_rfile_17
  assign rf_rfile_17_D_IN = v__h7646 ;
  assign rf_rfile_17_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd17 ;

  // register rf_rfile_18
  assign rf_rfile_18_D_IN = v__h7646 ;
  assign rf_rfile_18_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd18 ;

  // register rf_rfile_19
  assign rf_rfile_19_D_IN = v__h7646 ;
  assign rf_rfile_19_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd19 ;

  // register rf_rfile_2
  assign rf_rfile_2_D_IN = v__h7646 ;
  assign rf_rfile_2_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd2 ;

  // register rf_rfile_20
  assign rf_rfile_20_D_IN = v__h7646 ;
  assign rf_rfile_20_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd20 ;

  // register rf_rfile_21
  assign rf_rfile_21_D_IN = v__h7646 ;
  assign rf_rfile_21_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd21 ;

  // register rf_rfile_22
  assign rf_rfile_22_D_IN = v__h7646 ;
  assign rf_rfile_22_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd22 ;

  // register rf_rfile_23
  assign rf_rfile_23_D_IN = v__h7646 ;
  assign rf_rfile_23_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd23 ;

  // register rf_rfile_24
  assign rf_rfile_24_D_IN = v__h7646 ;
  assign rf_rfile_24_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd24 ;

  // register rf_rfile_25
  assign rf_rfile_25_D_IN = v__h7646 ;
  assign rf_rfile_25_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd25 ;

  // register rf_rfile_26
  assign rf_rfile_26_D_IN = v__h7646 ;
  assign rf_rfile_26_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd26 ;

  // register rf_rfile_27
  assign rf_rfile_27_D_IN = v__h7646 ;
  assign rf_rfile_27_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd27 ;

  // register rf_rfile_28
  assign rf_rfile_28_D_IN = v__h7646 ;
  assign rf_rfile_28_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd28 ;

  // register rf_rfile_29
  assign rf_rfile_29_D_IN = v__h7646 ;
  assign rf_rfile_29_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd29 ;

  // register rf_rfile_3
  assign rf_rfile_3_D_IN = v__h7646 ;
  assign rf_rfile_3_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd3 ;

  // register rf_rfile_30
  assign rf_rfile_30_D_IN = v__h7646 ;
  assign rf_rfile_30_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd30 ;

  // register rf_rfile_31
  assign rf_rfile_31_D_IN = v__h7646 ;
  assign rf_rfile_31_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd31 ;

  // register rf_rfile_4
  assign rf_rfile_4_D_IN = v__h7646 ;
  assign rf_rfile_4_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd4 ;

  // register rf_rfile_5
  assign rf_rfile_5_D_IN = v__h7646 ;
  assign rf_rfile_5_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd5 ;

  // register rf_rfile_6
  assign rf_rfile_6_D_IN = v__h7646 ;
  assign rf_rfile_6_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd6 ;

  // register rf_rfile_7
  assign rf_rfile_7_D_IN = v__h7646 ;
  assign rf_rfile_7_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd7 ;

  // register rf_rfile_8
  assign rf_rfile_8_D_IN = v__h7646 ;
  assign rf_rfile_8_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd8 ;

  // register rf_rfile_9
  assign rf_rfile_9_D_IN = v__h7646 ;
  assign rf_rfile_9_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[40:36] == 5'd9 ;

  // register stage
  always@(WILL_FIRE_RL_doExecute or
	  MUX_stage_write_1__VAL_1 or
	  WILL_FIRE_RL_doWriteback or
	  WILL_FIRE_RL_doFetch or WILL_FIRE_RL_doDecode)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_doExecute: stage_D_IN = MUX_stage_write_1__VAL_1;
      WILL_FIRE_RL_doWriteback: stage_D_IN = 2'd0;
      WILL_FIRE_RL_doFetch: stage_D_IN = 2'd1;
      WILL_FIRE_RL_doDecode: stage_D_IN = 2'd2;
      default: stage_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign stage_EN =
	     WILL_FIRE_RL_doExecute || WILL_FIRE_RL_doWriteback ||
	     WILL_FIRE_RL_doFetch ||
	     WILL_FIRE_RL_doDecode ;

  // submodule d2e
  assign d2e_D_IN =
	     { f2d_D_OUT,
	       CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37,
	       (imemRespQ_D_OUT[6:0] == 7'b0110011) ?
		 ((imemRespQ_D_OUT[31:25] == 7'b0) ?
		    CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 :
		    ((imemRespQ_D_OUT[14:12] == 3'b0) ? 4'd1 : 4'd9)) :
		 CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39,
	       IF_imemRespQ_first__1_BITS_6_TO_0_2_EQ_0b11001_ETC___d252,
	       x__h5074,
	       x__h6093 } ;
  assign d2e_ENQ = WILL_FIRE_RL_doDecode ;
  assign d2e_DEQ = WILL_FIRE_RL_doExecute ;
  assign d2e_CLR = 1'b0 ;

  // submodule dmemReqQ
  assign dmemReqQ_D_IN =
	     { eInst_addr__h6249[15:0],
	       eInst_data__h6248,
	       d2e_D_OUT[66:65],
	       d2e_D_OUT[125:122] != 4'd6 } ;
  assign dmemReqQ_ENQ =
	     WILL_FIRE_RL_doExecute &&
	     (d2e_D_OUT[125:122] == 4'd6 || d2e_D_OUT[125:122] == 4'd7) ;
  assign dmemReqQ_DEQ = EN_dMemReq ;
  assign dmemReqQ_CLR = 1'b0 ;

  // submodule dmemRespQ
  assign dmemRespQ_D_IN = dMemResp_data ;
  assign dmemRespQ_ENQ = EN_dMemResp ;
  assign dmemRespQ_DEQ = WILL_FIRE_RL_doWriteback && e2m_D_OUT[35] ;
  assign dmemRespQ_CLR = 1'b0 ;

  // submodule e2m
  always@(d2e_D_OUT or eInst_data__h6248)
  begin
    case (d2e_D_OUT[125:122])
      4'd6:
	  e2m_D_IN =
	      { d2e_D_OUT[157:126],
		d2e_D_OUT[113:109],
		33'h100000000,
		d2e_D_OUT[64],
		d2e_D_OUT[66:65] };
      4'd7: e2m_D_IN = { d2e_D_OUT[157:126], 41'h002AAAAAAAA };
      default: e2m_D_IN =
		   d2e_D_OUT[114] ?
		     { d2e_D_OUT[157:126],
		       d2e_D_OUT[113:109],
		       1'd0,
		       eInst_data__h6248,
		       3'h2 } :
		     { d2e_D_OUT[157:126], 41'h002AAAAAAAA };
    endcase
  end
  assign e2m_ENQ = WILL_FIRE_RL_doExecute ;
  assign e2m_DEQ = WILL_FIRE_RL_doWriteback ;
  assign e2m_CLR = 1'b0 ;

  // submodule f2d
  assign f2d_D_IN = pc ;
  assign f2d_ENQ = WILL_FIRE_RL_doFetch ;
  assign f2d_DEQ = WILL_FIRE_RL_doDecode ;
  assign f2d_CLR = 1'b0 ;

  // submodule imemReqQ
  assign imemReqQ_D_IN = { pc[15:0], 35'h555555556 } ;
  assign imemReqQ_ENQ = WILL_FIRE_RL_doFetch ;
  assign imemReqQ_DEQ = EN_iMemReq ;
  assign imemReqQ_CLR = 1'b0 ;

  // submodule imemRespQ
  assign imemRespQ_D_IN = iMemResp_data ;
  assign imemRespQ_ENQ = EN_iMemResp ;
  assign imemRespQ_DEQ = WILL_FIRE_RL_doDecode ;
  assign imemRespQ_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_imemRespQ_first__1_BITS_14_TO_12_6_EQ_0b101_ETC___d104 =
	     (imemRespQ_D_OUT[31:25] == 7'b0) ? 4'd8 : 4'd9 ;
  assign IF_imemRespQ_first__1_BITS_6_TO_0_2_EQ_0b11001_ETC___d250 =
	     { x__h4285,
	       dInst_imm__h3676,
	       (imemRespQ_D_OUT[6:0] == 7'b0000011) ?
		 ((imemRespQ_D_OUT[14:12] == 3'b010) ?
		    3'd6 :
		    { CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_1_ETC__q25,
		      imemRespQ_D_OUT[14:12] == 3'b001 ||
		      imemRespQ_D_OUT[14:12] == 3'b0 }) :
		 { CASE_imemRespQD_OUT_BITS_14_TO_12_0b1_1_0b10_3_0__q26,
		   1'h0 } } ;
  assign IF_imemRespQ_first__1_BITS_6_TO_0_2_EQ_0b11001_ETC___d252 =
	     { CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27,
	       CASE_imemRespQD_OUT_BITS_6_TO_0_0b10011_imemR_ETC__q28,
	       x__h4163,
	       x__h4220,
	       IF_imemRespQ_first__1_BITS_6_TO_0_2_EQ_0b11001_ETC___d250 } ;
  assign addr__h6482 = d2e_D_OUT[63:32] + d2e_D_OUT[98:67] ;
  assign d2eD_OUT_BITS_63_TO_32__q21 = d2e_D_OUT[63:32] ;
  assign d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334 =
	     d2e_D_OUT[157:126] + d2e_D_OUT[98:67] ;
  assign d2e_first__93_BITS_63_TO_32_13_EQ_d2e_first__9_ETC___d315 =
	     d2e_D_OUT[63:32] == d2e_D_OUT[31:0] ;
  assign d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319 =
	     (d2e_D_OUT[63:32] ^ 32'h80000000) <
	     (d2e_D_OUT[31:0] ^ 32'h80000000) ;
  assign d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321 =
	     d2e_D_OUT[63:32] < d2e_D_OUT[31:0] ;
  assign dmemRespQD_OUT_BITS_15_TO_0__q24 = dmemRespQ_D_OUT[15:0] ;
  assign dmemRespQD_OUT_BITS_7_TO_0__q23 = dmemRespQ_D_OUT[7:0] ;
  assign dw___1__h7719 =
	     { {24{dmemRespQD_OUT_BITS_7_TO_0__q23[7]}},
	       dmemRespQD_OUT_BITS_7_TO_0__q23 } ;
  assign dw___1__h7745 = { 24'd0, dmemRespQ_D_OUT[7:0] } ;
  assign dw___1__h7776 =
	     { {16{dmemRespQD_OUT_BITS_15_TO_0__q24[15]}},
	       dmemRespQD_OUT_BITS_15_TO_0__q24 } ;
  assign dw___1__h7801 = { 16'd0, dmemRespQ_D_OUT[15:0] } ;
  assign e2m_i_notFull__92_AND_IF_d2e_first__93_BITS_12_ETC___d301 =
	     e2m_FULL_N &&
	     ((d2e_D_OUT[125:122] == 4'd6) ?
		dmemReqQ_FULL_N :
		d2e_D_OUT[125:122] != 4'd7 || dmemReqQ_FULL_N) ;
  assign imemRespQD_OUT_BITS_31_TO_20__q20 = imemRespQ_D_OUT[31:20] ;
  assign immB__h3096 = { {19{x__h4426[12]}}, x__h4426 } ;
  assign immI__h3094 =
	     { {20{imemRespQD_OUT_BITS_31_TO_20__q20[11]}},
	       imemRespQD_OUT_BITS_31_TO_20__q20 } ;
  assign immJ__h3098 = { {11{x__h4538[20]}}, x__h4538 } ;
  assign immS__h3095 = { {20{x__h4632[11]}}, x__h4632 } ;
  assign immU__h3097 = { imemRespQ_D_OUT[31:12], 12'b0 } ;
  assign nextPc__h6235 = d2e_D_OUT[157:126] + 32'd4 ;
  assign nextPc__h6330 =
	     IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 ?
	       d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334 :
	       nextPc__h6235 ;
  assign nextPc__h6466 = { addr__h6482[31:1], 1'd0 } ;
  assign v__h7646 = e2m_D_OUT[35] ? v__h7675 : e2m_D_OUT[34:3] ;
  assign x__h4426 =
	     { imemRespQ_D_OUT[31],
	       imemRespQ_D_OUT[7],
	       imemRespQ_D_OUT[30:25],
	       imemRespQ_D_OUT[11:8],
	       1'b0 } ;
  assign x__h4538 =
	     { imemRespQ_D_OUT[31],
	       imemRespQ_D_OUT[19:12],
	       imemRespQ_D_OUT[20],
	       imemRespQ_D_OUT[30:21],
	       1'b0 } ;
  assign x__h4632 = { imemRespQ_D_OUT[31:25], imemRespQ_D_OUT[11:7] } ;
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q1 =
	      imemRespQ_D_OUT[19:15];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q1 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0, 7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q2 =
	      imemRespQ_D_OUT[19:15];
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q2 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q2)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b010, 3'b011, 3'b100, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q3 =
	      imemRespQ_D_OUT[19:15];
      3'b001:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q3 =
	      (imemRespQ_D_OUT[31:25] == 7'b0) ?
		imemRespQ_D_OUT[19:15] :
		5'd0;
      3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q3 =
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q2;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q4 =
	      imemRespQ_D_OUT[19:15];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q4 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q5 =
	      imemRespQ_D_OUT[19:15];
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q6 =
	      imemRespQ_D_OUT[19:15];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q6 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q5 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q6)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q7 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q5;
      7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q7 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q6;
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q7 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q8 =
	      imemRespQ_D_OUT[19:15];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q8 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q1 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q3 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q4 or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q7 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q8)
  begin
    case (imemRespQ_D_OUT[6:0])
      7'b0000011:
	  x__h4220 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q1;
      7'b0010011:
	  x__h4220 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q3;
      7'b0100011:
	  x__h4220 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q4;
      7'b0110011:
	  x__h4220 = CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q7;
      7'b0110111, 7'b1101111: x__h4220 = 5'd0;
      7'b1100011:
	  x__h4220 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q8;
      7'b1100111: x__h4220 = imemRespQ_D_OUT[19:15];
      default: x__h4220 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q9 =
	      imemRespQ_D_OUT[11:7];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q9 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0, 7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q10 =
	      imemRespQ_D_OUT[11:7];
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q10 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q10)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b010, 3'b011, 3'b100, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q11 =
	      imemRespQ_D_OUT[11:7];
      3'b001:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q11 =
	      (imemRespQ_D_OUT[31:25] == 7'b0) ? imemRespQ_D_OUT[11:7] : 5'd0;
      3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q11 =
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_imemRes_ETC__q10;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q12 =
	      imemRespQ_D_OUT[11:7];
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q13 =
	      imemRespQ_D_OUT[11:7];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q13 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q12 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q13)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q14 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q12;
      7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q14 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q13;
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q14 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q9 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q11 or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q14)
  begin
    case (imemRespQ_D_OUT[6:0])
      7'b0000011:
	  x__h4163 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q9;
      7'b0010011:
	  x__h4163 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q11;
      7'b0010111, 7'b0110111, 7'b1100111, 7'b1101111:
	  x__h4163 = imemRespQ_D_OUT[11:7];
      7'b0100011, 7'b1100011: x__h4163 = 5'd0;
      7'b0110011:
	  x__h4163 = CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q14;
      default: x__h4163 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q15 =
	      imemRespQ_D_OUT[24:20];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q15 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q16 =
	      imemRespQ_D_OUT[24:20];
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q17 =
	      imemRespQ_D_OUT[24:20];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q17 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q16 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q17)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q18 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q16;
      7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q18 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q17;
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q18 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q19 =
	      imemRespQ_D_OUT[24:20];
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q19 = 5'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q15 or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q18 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q19)
  begin
    case (imemRespQ_D_OUT[6:0])
      7'b0000011, 7'b0010011, 7'b0110111, 7'b1100111, 7'b1101111:
	  x__h4285 = 5'd0;
      7'b0100011:
	  x__h4285 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q15;
      7'b0110011:
	  x__h4285 = CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q18;
      7'b1100011:
	  x__h4285 = CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q19;
      default: x__h4285 = 5'd0;
    endcase
  end
  always@(x__h4220 or
	  rf_rfile_0 or
	  rf_rfile_1 or
	  rf_rfile_2 or
	  rf_rfile_3 or
	  rf_rfile_4 or
	  rf_rfile_5 or
	  rf_rfile_6 or
	  rf_rfile_7 or
	  rf_rfile_8 or
	  rf_rfile_9 or
	  rf_rfile_10 or
	  rf_rfile_11 or
	  rf_rfile_12 or
	  rf_rfile_13 or
	  rf_rfile_14 or
	  rf_rfile_15 or
	  rf_rfile_16 or
	  rf_rfile_17 or
	  rf_rfile_18 or
	  rf_rfile_19 or
	  rf_rfile_20 or
	  rf_rfile_21 or
	  rf_rfile_22 or
	  rf_rfile_23 or
	  rf_rfile_24 or
	  rf_rfile_25 or
	  rf_rfile_26 or
	  rf_rfile_27 or
	  rf_rfile_28 or rf_rfile_29 or rf_rfile_30 or rf_rfile_31)
  begin
    case (x__h4220)
      5'd0: x__h5074 = rf_rfile_0;
      5'd1: x__h5074 = rf_rfile_1;
      5'd2: x__h5074 = rf_rfile_2;
      5'd3: x__h5074 = rf_rfile_3;
      5'd4: x__h5074 = rf_rfile_4;
      5'd5: x__h5074 = rf_rfile_5;
      5'd6: x__h5074 = rf_rfile_6;
      5'd7: x__h5074 = rf_rfile_7;
      5'd8: x__h5074 = rf_rfile_8;
      5'd9: x__h5074 = rf_rfile_9;
      5'd10: x__h5074 = rf_rfile_10;
      5'd11: x__h5074 = rf_rfile_11;
      5'd12: x__h5074 = rf_rfile_12;
      5'd13: x__h5074 = rf_rfile_13;
      5'd14: x__h5074 = rf_rfile_14;
      5'd15: x__h5074 = rf_rfile_15;
      5'd16: x__h5074 = rf_rfile_16;
      5'd17: x__h5074 = rf_rfile_17;
      5'd18: x__h5074 = rf_rfile_18;
      5'd19: x__h5074 = rf_rfile_19;
      5'd20: x__h5074 = rf_rfile_20;
      5'd21: x__h5074 = rf_rfile_21;
      5'd22: x__h5074 = rf_rfile_22;
      5'd23: x__h5074 = rf_rfile_23;
      5'd24: x__h5074 = rf_rfile_24;
      5'd25: x__h5074 = rf_rfile_25;
      5'd26: x__h5074 = rf_rfile_26;
      5'd27: x__h5074 = rf_rfile_27;
      5'd28: x__h5074 = rf_rfile_28;
      5'd29: x__h5074 = rf_rfile_29;
      5'd30: x__h5074 = rf_rfile_30;
      5'd31: x__h5074 = rf_rfile_31;
    endcase
  end
  always@(x__h4285 or
	  rf_rfile_0 or
	  rf_rfile_1 or
	  rf_rfile_2 or
	  rf_rfile_3 or
	  rf_rfile_4 or
	  rf_rfile_5 or
	  rf_rfile_6 or
	  rf_rfile_7 or
	  rf_rfile_8 or
	  rf_rfile_9 or
	  rf_rfile_10 or
	  rf_rfile_11 or
	  rf_rfile_12 or
	  rf_rfile_13 or
	  rf_rfile_14 or
	  rf_rfile_15 or
	  rf_rfile_16 or
	  rf_rfile_17 or
	  rf_rfile_18 or
	  rf_rfile_19 or
	  rf_rfile_20 or
	  rf_rfile_21 or
	  rf_rfile_22 or
	  rf_rfile_23 or
	  rf_rfile_24 or
	  rf_rfile_25 or
	  rf_rfile_26 or
	  rf_rfile_27 or
	  rf_rfile_28 or rf_rfile_29 or rf_rfile_30 or rf_rfile_31)
  begin
    case (x__h4285)
      5'd0: x__h6093 = rf_rfile_0;
      5'd1: x__h6093 = rf_rfile_1;
      5'd2: x__h6093 = rf_rfile_2;
      5'd3: x__h6093 = rf_rfile_3;
      5'd4: x__h6093 = rf_rfile_4;
      5'd5: x__h6093 = rf_rfile_5;
      5'd6: x__h6093 = rf_rfile_6;
      5'd7: x__h6093 = rf_rfile_7;
      5'd8: x__h6093 = rf_rfile_8;
      5'd9: x__h6093 = rf_rfile_9;
      5'd10: x__h6093 = rf_rfile_10;
      5'd11: x__h6093 = rf_rfile_11;
      5'd12: x__h6093 = rf_rfile_12;
      5'd13: x__h6093 = rf_rfile_13;
      5'd14: x__h6093 = rf_rfile_14;
      5'd15: x__h6093 = rf_rfile_15;
      5'd16: x__h6093 = rf_rfile_16;
      5'd17: x__h6093 = rf_rfile_17;
      5'd18: x__h6093 = rf_rfile_18;
      5'd19: x__h6093 = rf_rfile_19;
      5'd20: x__h6093 = rf_rfile_20;
      5'd21: x__h6093 = rf_rfile_21;
      5'd22: x__h6093 = rf_rfile_22;
      5'd23: x__h6093 = rf_rfile_23;
      5'd24: x__h6093 = rf_rfile_24;
      5'd25: x__h6093 = rf_rfile_25;
      5'd26: x__h6093 = rf_rfile_26;
      5'd27: x__h6093 = rf_rfile_27;
      5'd28: x__h6093 = rf_rfile_28;
      5'd29: x__h6093 = rf_rfile_29;
      5'd30: x__h6093 = rf_rfile_30;
      5'd31: x__h6093 = rf_rfile_31;
    endcase
  end
  always@(d2e_D_OUT or d2eD_OUT_BITS_63_TO_32__q21 or addr__h6482)
  begin
    case (d2e_D_OUT[121:118])
      4'd0: data__h6328 = addr__h6482;
      4'd1: data__h6328 = d2e_D_OUT[63:32] - d2e_D_OUT[98:67];
      4'd2: data__h6328 = d2e_D_OUT[63:32] & d2e_D_OUT[98:67];
      4'd3: data__h6328 = d2e_D_OUT[63:32] | d2e_D_OUT[98:67];
      4'd4: data__h6328 = d2e_D_OUT[63:32] ^ d2e_D_OUT[98:67];
      4'd5:
	  data__h6328 =
	      ((d2e_D_OUT[63:32] ^ 32'h80000000) <
	       (d2e_D_OUT[98:67] ^ 32'h80000000)) ?
		32'd1 :
		32'd0;
      4'd6:
	  data__h6328 = (d2e_D_OUT[63:32] < d2e_D_OUT[98:67]) ? 32'd1 : 32'd0;
      4'd7: data__h6328 = d2e_D_OUT[63:32] << d2e_D_OUT[71:67];
      4'd8: data__h6328 = d2e_D_OUT[63:32] >> d2e_D_OUT[71:67];
      default: data__h6328 =
		   d2e_D_OUT[63:32] >> d2e_D_OUT[71:67] |
		   ~(32'hFFFFFFFF >> d2e_D_OUT[71:67]) &
		   {32{d2eD_OUT_BITS_63_TO_32__q21[31]}};
    endcase
  end
  always@(d2e_D_OUT or addr__h6482)
  begin
    case (d2e_D_OUT[125:122])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5: eInst_addr__h6249 = 32'd0;
      4'd6, 4'd7: eInst_addr__h6249 = addr__h6482;
      default: eInst_addr__h6249 = 32'd0;
    endcase
  end
  always@(imemRespQ_D_OUT or immI__h3094)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'd5, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_immI094_ETC__q22 =
	      immI__h3094;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  immU__h3097 or
	  immI__h3094 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_immI094_ETC__q22 or
	  immS__h3095 or immB__h3096 or immJ__h3098)
  begin
    case (imemRespQ_D_OUT[6:0])
      7'b0000011, 7'b1100111: dInst_imm__h3676 = immI__h3094;
      7'b0010011:
	  dInst_imm__h3676 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_immI094_ETC__q22;
      7'b0100011: dInst_imm__h3676 = immS__h3095;
      7'b0110111: dInst_imm__h3676 = immU__h3097;
      7'b1100011: dInst_imm__h3676 = immB__h3096;
      7'b1101111: dInst_imm__h3676 = immJ__h3098;
      default: dInst_imm__h3676 = immU__h3097;
    endcase
  end
  always@(e2m_D_OUT or
	  dmemRespQ_D_OUT or
	  dw___1__h7719 or dw___1__h7745 or dw___1__h7776 or dw___1__h7801)
  begin
    case (e2m_D_OUT[1:0])
      2'd0: v__h7675 = e2m_D_OUT[2] ? dw___1__h7719 : dw___1__h7745;
      2'd1: v__h7675 = e2m_D_OUT[2] ? dw___1__h7776 : dw___1__h7801;
      default: v__h7675 = dmemRespQ_D_OUT;
    endcase
  end
  always@(d2e_D_OUT or
	  d2eD_OUT_BITS_63_TO_32__q21 or
	  d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319 or
	  d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321)
  begin
    case (d2e_D_OUT[121:118])
      4'd0: data__h6326 = d2e_D_OUT[63:32] + d2e_D_OUT[31:0];
      4'd1: data__h6326 = d2e_D_OUT[63:32] - d2e_D_OUT[31:0];
      4'd2: data__h6326 = d2e_D_OUT[63:32] & d2e_D_OUT[31:0];
      4'd3: data__h6326 = d2e_D_OUT[63:32] | d2e_D_OUT[31:0];
      4'd4: data__h6326 = d2e_D_OUT[63:32] ^ d2e_D_OUT[31:0];
      4'd5:
	  data__h6326 =
	      d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319 ?
		32'd1 :
		32'd0;
      4'd6:
	  data__h6326 =
	      d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321 ?
		32'd1 :
		32'd0;
      4'd7: data__h6326 = d2e_D_OUT[63:32] << d2e_D_OUT[4:0];
      4'd8: data__h6326 = d2e_D_OUT[63:32] >> d2e_D_OUT[4:0];
      default: data__h6326 =
		   d2e_D_OUT[63:32] >> d2e_D_OUT[4:0] |
		   ~(32'hFFFFFFFF >> d2e_D_OUT[4:0]) &
		   {32{d2eD_OUT_BITS_63_TO_32__q21[31]}};
    endcase
  end
  always@(d2e_D_OUT or
	  d2e_first__93_BITS_63_TO_32_13_EQ_d2e_first__9_ETC___d315 or
	  d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319 or
	  d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321)
  begin
    case (d2e_D_OUT[117:115])
      3'd0:
	  IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
	      d2e_first__93_BITS_63_TO_32_13_EQ_d2e_first__9_ETC___d315;
      3'd1:
	  IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
	      !d2e_first__93_BITS_63_TO_32_13_EQ_d2e_first__9_ETC___d315;
      3'd2:
	  IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
	      d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319;
      3'd3:
	  IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
	      d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321;
      3'd4:
	  IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
	      !d2e_first__93_BITS_63_TO_32_13_SLT_d2e_first___ETC___d319;
      3'd5:
	  IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
	      !d2e_first__93_BITS_63_TO_32_13_ULT_d2e_first___ETC___d321;
      default: IF_d2e_first__93_BITS_117_TO_115_11_EQ_0_12_TH_ETC___d332 =
		   d2e_D_OUT[117:115] == 3'd6;
    endcase
  end
  always@(d2e_D_OUT or
	  d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334 or
	  data__h6326 or data__h6328 or nextPc__h6235)
  begin
    case (d2e_D_OUT[125:122])
      4'd0: eInst_data__h6248 = data__h6326;
      4'd1: eInst_data__h6248 = data__h6328;
      4'd3: eInst_data__h6248 = d2e_D_OUT[98:67];
      4'd4, 4'd5: eInst_data__h6248 = nextPc__h6235;
      4'd7: eInst_data__h6248 = d2e_D_OUT[31:0];
      default: eInst_data__h6248 =
		   d2e_first__93_BITS_157_TO_126_08_PLUS_d2e_firs_ETC___d334;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_1_ETC__q25 = 2'd0;
      3'b001, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_1_ETC__q25 = 2'd1;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_1_ETC__q25 = 2'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b001: CASE_imemRespQD_OUT_BITS_14_TO_12_0b1_1_0b10_3_0__q26 = 2'd1;
      3'b010: CASE_imemRespQD_OUT_BITS_14_TO_12_0b1_1_0b10_3_0__q26 = 2'd3;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b1_1_0b10_3_0__q26 = 2'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27 =
	      imemRespQ_D_OUT[14:12];
      3'b100: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27 = 3'd2;
      3'b101: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27 = 3'd4;
      3'b110: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27 = 3'd3;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_imemRes_ETC__q27 = 3'd5;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[6:0])
      7'b0010011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b10011_imemR_ETC__q28 =
	      imemRespQ_D_OUT[14:12] == 3'b0 ||
	      imemRespQ_D_OUT[14:12] == 3'b010 ||
	      imemRespQ_D_OUT[14:12] == 3'b011 ||
	      imemRespQ_D_OUT[14:12] == 3'b100 ||
	      imemRespQ_D_OUT[14:12] == 3'b110 ||
	      imemRespQ_D_OUT[14:12] == 3'b111 ||
	      ((imemRespQ_D_OUT[14:12] == 3'b001) ?
		 imemRespQ_D_OUT[31:25] == 7'b0 :
		 imemRespQ_D_OUT[14:12] == 3'b101 &&
		 (imemRespQ_D_OUT[31:25] == 7'b0 ||
		  imemRespQ_D_OUT[31:25] == 7'b0100000));
      7'b0110011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b10011_imemR_ETC__q28 =
	      (imemRespQ_D_OUT[31:25] == 7'b0) ?
		1'b1 :
		imemRespQ_D_OUT[31:25] == 7'b0100000 &&
		(imemRespQ_D_OUT[14:12] == 3'b0 ||
		 imemRespQ_D_OUT[14:12] == 3'b101);
      default: CASE_imemRespQD_OUT_BITS_6_TO_0_0b10011_imemR_ETC__q28 =
		   imemRespQ_D_OUT[6:0] == 7'b0110111 ||
		   imemRespQ_D_OUT[6:0] == 7'b1101111 ||
		   imemRespQ_D_OUT[6:0] == 7'b1100111 ||
		   ((imemRespQ_D_OUT[6:0] == 7'b0000011) ?
		      imemRespQ_D_OUT[14:12] == 3'b010 ||
		      imemRespQ_D_OUT[14:12] == 3'b001 ||
		      imemRespQ_D_OUT[14:12] == 3'b0 ||
		      imemRespQ_D_OUT[14:12] == 3'b101 ||
		      imemRespQ_D_OUT[14:12] == 3'b100 :
		      imemRespQ_D_OUT[6:0] == 7'b0010111);
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_6_0b1_6_ETC__q29 = 4'd6;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_6_0b1_6_ETC__q29 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0, 7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_1_0b100_ETC__q30 = 4'd1;
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_1_0b100_ETC__q30 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_1_0b100_ETC__q30)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b010, 3'b011, 3'b100, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_1_0b1_I_ETC__q31 = 4'd1;
      3'b001:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_1_0b1_I_ETC__q31 =
	      (imemRespQ_D_OUT[31:25] == 7'b0) ? 4'd1 : 4'd9;
      3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_1_0b1_I_ETC__q31 =
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_1_0b100_ETC__q30;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_7_0b1_7_ETC__q32 = 4'd7;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_7_0b1_7_ETC__q32 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_0_ETC__q33 = 4'd0;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b101_ETC__q34 = 4'd0;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b101_ETC__q34 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_0_ETC__q33 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b101_ETC__q34)
  begin
    case (imemRespQ_D_OUT[31:25])
      7'b0:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q35 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_0_ETC__q33;
      7'b0100000:
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q35 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b101_ETC__q34;
      default: CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q35 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_2_0b1_2_ETC__q36 = 4'd2;
      default: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_2_0b1_2_ETC__q36 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_6_0b1_6_ETC__q29 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_1_0b1_I_ETC__q31 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_7_0b1_7_ETC__q32 or
	  CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q35 or
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_2_0b1_2_ETC__q36)
  begin
    case (imemRespQ_D_OUT[6:0])
      7'b0000011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_6_0b1_6_ETC__q29;
      7'b0010011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_1_0b1_I_ETC__q31;
      7'b0010111:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 = 4'd8;
      7'b0100011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_7_0b1_7_ETC__q32;
      7'b0110011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 =
	      CASE_imemRespQD_OUT_BITS_31_TO_25_0b0_CASE_im_ETC__q35;
      7'b0110111:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 = 4'd3;
      7'b1100011:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 =
	      CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_2_0b1_2_ETC__q36;
      7'b1100111:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 = 4'd5;
      7'b1101111:
	  CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 = 4'd4;
      default: CASE_imemRespQD_OUT_BITS_6_TO_0_0b11_CASE_ime_ETC__q37 = 4'd9;
    endcase
  end
  always@(imemRespQ_D_OUT)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd0;
      3'b001: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd7;
      3'b010: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd5;
      3'b011: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd6;
      3'b100: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd4;
      3'd5: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd8;
      3'b110: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd3;
      3'b111: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q38 = 4'd2;
    endcase
  end
  always@(imemRespQ_D_OUT or
	  IF_imemRespQ_first__1_BITS_14_TO_12_6_EQ_0b101_ETC___d104)
  begin
    case (imemRespQ_D_OUT[14:12])
      3'b0: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd0;
      3'b001: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd7;
      3'b010: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd5;
      3'b011: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd6;
      3'b100: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd4;
      3'd5:
	  CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 =
	      IF_imemRespQ_first__1_BITS_14_TO_12_6_EQ_0b101_ETC___d104;
      3'b110: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd3;
      3'b111: CASE_imemRespQD_OUT_BITS_14_TO_12_0b0_0_0b1_7_ETC__q39 = 4'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	instCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	stage <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (cycles_EN) cycles <= `BSV_ASSIGNMENT_DELAY cycles_D_IN;
	if (instCnt_EN) instCnt <= `BSV_ASSIGNMENT_DELAY instCnt_D_IN;
	if (pc_EN) pc <= `BSV_ASSIGNMENT_DELAY pc_D_IN;
	if (rf_rfile_0_EN)
	  rf_rfile_0 <= `BSV_ASSIGNMENT_DELAY rf_rfile_0_D_IN;
	if (rf_rfile_1_EN)
	  rf_rfile_1 <= `BSV_ASSIGNMENT_DELAY rf_rfile_1_D_IN;
	if (rf_rfile_10_EN)
	  rf_rfile_10 <= `BSV_ASSIGNMENT_DELAY rf_rfile_10_D_IN;
	if (rf_rfile_11_EN)
	  rf_rfile_11 <= `BSV_ASSIGNMENT_DELAY rf_rfile_11_D_IN;
	if (rf_rfile_12_EN)
	  rf_rfile_12 <= `BSV_ASSIGNMENT_DELAY rf_rfile_12_D_IN;
	if (rf_rfile_13_EN)
	  rf_rfile_13 <= `BSV_ASSIGNMENT_DELAY rf_rfile_13_D_IN;
	if (rf_rfile_14_EN)
	  rf_rfile_14 <= `BSV_ASSIGNMENT_DELAY rf_rfile_14_D_IN;
	if (rf_rfile_15_EN)
	  rf_rfile_15 <= `BSV_ASSIGNMENT_DELAY rf_rfile_15_D_IN;
	if (rf_rfile_16_EN)
	  rf_rfile_16 <= `BSV_ASSIGNMENT_DELAY rf_rfile_16_D_IN;
	if (rf_rfile_17_EN)
	  rf_rfile_17 <= `BSV_ASSIGNMENT_DELAY rf_rfile_17_D_IN;
	if (rf_rfile_18_EN)
	  rf_rfile_18 <= `BSV_ASSIGNMENT_DELAY rf_rfile_18_D_IN;
	if (rf_rfile_19_EN)
	  rf_rfile_19 <= `BSV_ASSIGNMENT_DELAY rf_rfile_19_D_IN;
	if (rf_rfile_2_EN)
	  rf_rfile_2 <= `BSV_ASSIGNMENT_DELAY rf_rfile_2_D_IN;
	if (rf_rfile_20_EN)
	  rf_rfile_20 <= `BSV_ASSIGNMENT_DELAY rf_rfile_20_D_IN;
	if (rf_rfile_21_EN)
	  rf_rfile_21 <= `BSV_ASSIGNMENT_DELAY rf_rfile_21_D_IN;
	if (rf_rfile_22_EN)
	  rf_rfile_22 <= `BSV_ASSIGNMENT_DELAY rf_rfile_22_D_IN;
	if (rf_rfile_23_EN)
	  rf_rfile_23 <= `BSV_ASSIGNMENT_DELAY rf_rfile_23_D_IN;
	if (rf_rfile_24_EN)
	  rf_rfile_24 <= `BSV_ASSIGNMENT_DELAY rf_rfile_24_D_IN;
	if (rf_rfile_25_EN)
	  rf_rfile_25 <= `BSV_ASSIGNMENT_DELAY rf_rfile_25_D_IN;
	if (rf_rfile_26_EN)
	  rf_rfile_26 <= `BSV_ASSIGNMENT_DELAY rf_rfile_26_D_IN;
	if (rf_rfile_27_EN)
	  rf_rfile_27 <= `BSV_ASSIGNMENT_DELAY rf_rfile_27_D_IN;
	if (rf_rfile_28_EN)
	  rf_rfile_28 <= `BSV_ASSIGNMENT_DELAY rf_rfile_28_D_IN;
	if (rf_rfile_29_EN)
	  rf_rfile_29 <= `BSV_ASSIGNMENT_DELAY rf_rfile_29_D_IN;
	if (rf_rfile_3_EN)
	  rf_rfile_3 <= `BSV_ASSIGNMENT_DELAY rf_rfile_3_D_IN;
	if (rf_rfile_30_EN)
	  rf_rfile_30 <= `BSV_ASSIGNMENT_DELAY rf_rfile_30_D_IN;
	if (rf_rfile_31_EN)
	  rf_rfile_31 <= `BSV_ASSIGNMENT_DELAY rf_rfile_31_D_IN;
	if (rf_rfile_4_EN)
	  rf_rfile_4 <= `BSV_ASSIGNMENT_DELAY rf_rfile_4_D_IN;
	if (rf_rfile_5_EN)
	  rf_rfile_5 <= `BSV_ASSIGNMENT_DELAY rf_rfile_5_D_IN;
	if (rf_rfile_6_EN)
	  rf_rfile_6 <= `BSV_ASSIGNMENT_DELAY rf_rfile_6_D_IN;
	if (rf_rfile_7_EN)
	  rf_rfile_7 <= `BSV_ASSIGNMENT_DELAY rf_rfile_7_D_IN;
	if (rf_rfile_8_EN)
	  rf_rfile_8 <= `BSV_ASSIGNMENT_DELAY rf_rfile_8_D_IN;
	if (rf_rfile_9_EN)
	  rf_rfile_9 <= `BSV_ASSIGNMENT_DELAY rf_rfile_9_D_IN;
	if (stage_EN) stage <= `BSV_ASSIGNMENT_DELAY stage_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycles = 32'hAAAAAAAA;
    instCnt = 32'hAAAAAAAA;
    pc = 32'hAAAAAAAA;
    rf_rfile_0 = 32'hAAAAAAAA;
    rf_rfile_1 = 32'hAAAAAAAA;
    rf_rfile_10 = 32'hAAAAAAAA;
    rf_rfile_11 = 32'hAAAAAAAA;
    rf_rfile_12 = 32'hAAAAAAAA;
    rf_rfile_13 = 32'hAAAAAAAA;
    rf_rfile_14 = 32'hAAAAAAAA;
    rf_rfile_15 = 32'hAAAAAAAA;
    rf_rfile_16 = 32'hAAAAAAAA;
    rf_rfile_17 = 32'hAAAAAAAA;
    rf_rfile_18 = 32'hAAAAAAAA;
    rf_rfile_19 = 32'hAAAAAAAA;
    rf_rfile_2 = 32'hAAAAAAAA;
    rf_rfile_20 = 32'hAAAAAAAA;
    rf_rfile_21 = 32'hAAAAAAAA;
    rf_rfile_22 = 32'hAAAAAAAA;
    rf_rfile_23 = 32'hAAAAAAAA;
    rf_rfile_24 = 32'hAAAAAAAA;
    rf_rfile_25 = 32'hAAAAAAAA;
    rf_rfile_26 = 32'hAAAAAAAA;
    rf_rfile_27 = 32'hAAAAAAAA;
    rf_rfile_28 = 32'hAAAAAAAA;
    rf_rfile_29 = 32'hAAAAAAAA;
    rf_rfile_3 = 32'hAAAAAAAA;
    rf_rfile_30 = 32'hAAAAAAAA;
    rf_rfile_31 = 32'hAAAAAAAA;
    rf_rfile_4 = 32'hAAAAAAAA;
    rf_rfile_5 = 32'hAAAAAAAA;
    rf_rfile_6 = 32'hAAAAAAAA;
    rf_rfile_7 = 32'hAAAAAAAA;
    rf_rfile_8 = 32'hAAAAAAAA;
    rf_rfile_9 = 32'hAAAAAAAA;
    stage = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFetch)
	$write("[0x%8x:0x%4x] Fetching instruction count 0x%4x\n",
	       cycles,
	       pc,
	       instCnt);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doDecode)
	$write("[0x%8x:0x%04x] decoding 0x%08x\n",
	       cycles,
	       f2d_D_OUT,
	       imemRespQ_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute)
	$write("[0x%8x:0x%04x] Executing\n", cycles, d2e_D_OUT[157:126]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd9)
	$display("Reached unsupported instruction");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd9)
	$display("Total Clock Cycles = %d\nTotal Instruction Count = %d",
		 cycles,
		 instCnt);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd9)
	$display("Dumping the state of the processor");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd9)
	$display("pc = 0x%x", d2e_D_OUT[157:126]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd9)
	$display("Quitting simulation.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd9)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd6)
	$write("[0x%8x:0x%04x] \t\t Mem read from 0x%08x\n",
	       cycles,
	       d2e_D_OUT[157:126],
	       eInst_addr__h6249);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute && d2e_D_OUT[125:122] == 4'd7)
	$write("[0x%8x:0x%04x] \t\t Mem write 0x%08x to 0x%08x\n",
	       cycles,
	       d2e_D_OUT[157:126],
	       eInst_data__h6248,
	       eInst_addr__h6249);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doWriteback)
	$write("[0x%8x:0x%04x] Writeback writing %x to %d\n",
	       cycles,
	       e2m_D_OUT[72:41],
	       v__h7646,
	       e2m_D_OUT[40:36]);
  end
  // synopsys translate_on
endmodule  // mkProcessor

