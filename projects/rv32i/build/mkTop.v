//
// Generated by Bluespec Compiler (build 102a30c)
//
// On Mon Feb  1 21:39:03 PST 2021
//
//
// Ports:
// Name                         I/O  size props
// ftdi_txd                       O     1 reg
// CLK_clk_25mhz                  I     1 clock
// ftdi_rxd                       I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop(CLK_clk_25mhz,

	     ftdi_txd,

	     ftdi_rxd);
  input  CLK_clk_25mhz;

  // value method ftdi_txd
  output ftdi_txd;

  // action method ftdi_rx
  input  ftdi_rxd;

  // signals for module outputs
  wire ftdi_txd;

  // inlined wires
  wire [1 : 0] main_dmem_mem_serverAdapterB_s1_1_wget,
	       main_dmem_mem_serverAdapterB_writeWithResp_wget,
	       main_imem_mem_serverAdapterA_s1_1_wget,
	       main_imem_mem_serverAdapterB_s1_1_wget,
	       main_imem_mem_serverAdapterB_writeWithResp_wget;
  wire main_dmem_mem_serverAdapterA_cnt_1_whas,
       main_dmem_mem_serverAdapterA_outData_deqCalled_whas,
       main_dmem_mem_serverAdapterA_outData_enqData_whas,
       main_dmem_mem_serverAdapterA_outData_outData_whas,
       main_dmem_mem_serverAdapterB_cnt_1_whas,
       main_dmem_mem_serverAdapterB_outData_deqCalled_whas,
       main_dmem_mem_serverAdapterB_outData_enqData_whas,
       main_dmem_mem_serverAdapterB_outData_outData_whas,
       main_imem_mem_serverAdapterA_cnt_1_whas,
       main_imem_mem_serverAdapterA_outData_deqCalled_whas,
       main_imem_mem_serverAdapterA_outData_enqData_whas,
       main_imem_mem_serverAdapterA_outData_outData_whas,
       main_imem_mem_serverAdapterB_cnt_1_whas,
       main_imem_mem_serverAdapterB_outData_deqCalled_whas,
       main_imem_mem_serverAdapterB_outData_enqData_whas,
       main_imem_mem_serverAdapterB_outData_outData_whas;

  // register main_dmem_mem_serverAdapterA_cnt
  reg [2 : 0] main_dmem_mem_serverAdapterA_cnt;
  wire [2 : 0] main_dmem_mem_serverAdapterA_cnt_D_IN;
  wire main_dmem_mem_serverAdapterA_cnt_EN;

  // register main_dmem_mem_serverAdapterA_s1
  reg [1 : 0] main_dmem_mem_serverAdapterA_s1;
  wire [1 : 0] main_dmem_mem_serverAdapterA_s1_D_IN;
  wire main_dmem_mem_serverAdapterA_s1_EN;

  // register main_dmem_mem_serverAdapterB_cnt
  reg [2 : 0] main_dmem_mem_serverAdapterB_cnt;
  wire [2 : 0] main_dmem_mem_serverAdapterB_cnt_D_IN;
  wire main_dmem_mem_serverAdapterB_cnt_EN;

  // register main_dmem_mem_serverAdapterB_s1
  reg [1 : 0] main_dmem_mem_serverAdapterB_s1;
  wire [1 : 0] main_dmem_mem_serverAdapterB_s1_D_IN;
  wire main_dmem_mem_serverAdapterB_s1_EN;

  // register main_dmembytes
  reg [11 : 0] main_dmembytes;
  wire [11 : 0] main_dmembytes_D_IN;
  wire main_dmembytes_EN;

  // register main_imem_mem_serverAdapterA_cnt
  reg [2 : 0] main_imem_mem_serverAdapterA_cnt;
  wire [2 : 0] main_imem_mem_serverAdapterA_cnt_D_IN;
  wire main_imem_mem_serverAdapterA_cnt_EN;

  // register main_imem_mem_serverAdapterA_s1
  reg [1 : 0] main_imem_mem_serverAdapterA_s1;
  wire [1 : 0] main_imem_mem_serverAdapterA_s1_D_IN;
  wire main_imem_mem_serverAdapterA_s1_EN;

  // register main_imem_mem_serverAdapterB_cnt
  reg [2 : 0] main_imem_mem_serverAdapterB_cnt;
  wire [2 : 0] main_imem_mem_serverAdapterB_cnt_D_IN;
  wire main_imem_mem_serverAdapterB_cnt_EN;

  // register main_imem_mem_serverAdapterB_s1
  reg [1 : 0] main_imem_mem_serverAdapterB_s1;
  wire [1 : 0] main_imem_mem_serverAdapterB_s1_D_IN;
  wire main_imem_mem_serverAdapterB_s1_EN;

  // register main_imembytes
  reg [11 : 0] main_imembytes;
  wire [11 : 0] main_imembytes_D_IN;
  wire main_imembytes_EN;

  // register main_processorStart
  reg main_processorStart;
  wire main_processorStart_D_IN, main_processorStart_EN;

  // register main_serialCmd
  reg [8 : 0] main_serialCmd;
  wire [8 : 0] main_serialCmd_D_IN;
  wire main_serialCmd_EN;

  // register uart_bleft
  reg [3 : 0] uart_bleft;
  wire [3 : 0] uart_bleft_D_IN;
  wire uart_bleft_EN;

  // register uart_clkcnt
  reg [15 : 0] uart_clkcnt;
  wire [15 : 0] uart_clkcnt_D_IN;
  wire uart_clkcnt_EN;

  // register uart_curoutd
  reg [10 : 0] uart_curoutd;
  wire [10 : 0] uart_curoutd_D_IN;
  wire uart_curoutd_EN;

  // register uart_curoutoff
  reg [4 : 0] uart_curoutoff;
  wire [4 : 0] uart_curoutoff_D_IN;
  wire uart_curoutoff_EN;

  // register uart_outword
  reg [7 : 0] uart_outword;
  wire [7 : 0] uart_outword_D_IN;
  wire uart_outword_EN;

  // register uart_rxin
  reg [3 : 0] uart_rxin;
  wire [3 : 0] uart_rxin_D_IN;
  wire uart_rxin_EN;

  // register uart_samplecountdown
  reg [15 : 0] uart_samplecountdown;
  wire [15 : 0] uart_samplecountdown_D_IN;
  wire uart_samplecountdown_EN;

  // register uart_txdr
  reg uart_txdr;
  wire uart_txdr_D_IN, uart_txdr_EN;

  // ports of submodule main_dmem_mem_memory
  wire [31 : 0] main_dmem_mem_memory_DIA,
		main_dmem_mem_memory_DIB,
		main_dmem_mem_memory_DOA,
		main_dmem_mem_memory_DOB;
  wire [9 : 0] main_dmem_mem_memory_ADDRA, main_dmem_mem_memory_ADDRB;
  wire main_dmem_mem_memory_ENA,
       main_dmem_mem_memory_ENB,
       main_dmem_mem_memory_WEA,
       main_dmem_mem_memory_WEB;

  // ports of submodule main_dmem_mem_serverAdapterA_outDataCore
  wire [31 : 0] main_dmem_mem_serverAdapterA_outDataCore_D_IN,
		main_dmem_mem_serverAdapterA_outDataCore_D_OUT;
  wire main_dmem_mem_serverAdapterA_outDataCore_CLR,
       main_dmem_mem_serverAdapterA_outDataCore_DEQ,
       main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N,
       main_dmem_mem_serverAdapterA_outDataCore_ENQ,
       main_dmem_mem_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule main_dmem_mem_serverAdapterB_outDataCore
  wire [31 : 0] main_dmem_mem_serverAdapterB_outDataCore_D_IN,
		main_dmem_mem_serverAdapterB_outDataCore_D_OUT;
  wire main_dmem_mem_serverAdapterB_outDataCore_CLR,
       main_dmem_mem_serverAdapterB_outDataCore_DEQ,
       main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N,
       main_dmem_mem_serverAdapterB_outDataCore_ENQ,
       main_dmem_mem_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule main_dmem_readOffsetQ
  wire [1 : 0] main_dmem_readOffsetQ_D_IN, main_dmem_readOffsetQ_D_OUT;
  wire main_dmem_readOffsetQ_CLR,
       main_dmem_readOffsetQ_DEQ,
       main_dmem_readOffsetQ_EMPTY_N,
       main_dmem_readOffsetQ_ENQ,
       main_dmem_readOffsetQ_FULL_N;

  // ports of submodule main_dmem_reqQ
  wire [46 : 0] main_dmem_reqQ_D_IN, main_dmem_reqQ_D_OUT;
  wire main_dmem_reqQ_CLR,
       main_dmem_reqQ_DEQ,
       main_dmem_reqQ_EMPTY_N,
       main_dmem_reqQ_ENQ,
       main_dmem_reqQ_FULL_N;

  // ports of submodule main_imem_mem_memory
  wire [31 : 0] main_imem_mem_memory_DIA,
		main_imem_mem_memory_DIB,
		main_imem_mem_memory_DOA,
		main_imem_mem_memory_DOB;
  wire [9 : 0] main_imem_mem_memory_ADDRA, main_imem_mem_memory_ADDRB;
  wire main_imem_mem_memory_ENA,
       main_imem_mem_memory_ENB,
       main_imem_mem_memory_WEA,
       main_imem_mem_memory_WEB;

  // ports of submodule main_imem_mem_serverAdapterA_outDataCore
  wire [31 : 0] main_imem_mem_serverAdapterA_outDataCore_D_IN,
		main_imem_mem_serverAdapterA_outDataCore_D_OUT;
  wire main_imem_mem_serverAdapterA_outDataCore_CLR,
       main_imem_mem_serverAdapterA_outDataCore_DEQ,
       main_imem_mem_serverAdapterA_outDataCore_EMPTY_N,
       main_imem_mem_serverAdapterA_outDataCore_ENQ,
       main_imem_mem_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule main_imem_mem_serverAdapterB_outDataCore
  wire [31 : 0] main_imem_mem_serverAdapterB_outDataCore_D_IN,
		main_imem_mem_serverAdapterB_outDataCore_D_OUT;
  wire main_imem_mem_serverAdapterB_outDataCore_CLR,
       main_imem_mem_serverAdapterB_outDataCore_DEQ,
       main_imem_mem_serverAdapterB_outDataCore_EMPTY_N,
       main_imem_mem_serverAdapterB_outDataCore_ENQ,
       main_imem_mem_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule main_imem_readOffsetQ
  wire [1 : 0] main_imem_readOffsetQ_D_IN, main_imem_readOffsetQ_D_OUT;
  wire main_imem_readOffsetQ_CLR,
       main_imem_readOffsetQ_DEQ,
       main_imem_readOffsetQ_EMPTY_N,
       main_imem_readOffsetQ_ENQ,
       main_imem_readOffsetQ_FULL_N;

  // ports of submodule main_imem_reqQ
  wire [46 : 0] main_imem_reqQ_D_IN, main_imem_reqQ_D_OUT;
  wire main_imem_reqQ_CLR,
       main_imem_reqQ_DEQ,
       main_imem_reqQ_EMPTY_N,
       main_imem_reqQ_ENQ,
       main_imem_reqQ_FULL_N;

  // ports of submodule main_proc
  wire [50 : 0] main_proc_dMemReq, main_proc_iMemReq;
  wire [31 : 0] main_proc_dMemResp_data, main_proc_iMemResp_data;
  wire main_proc_EN_dMemReq,
       main_proc_EN_dMemResp,
       main_proc_EN_iMemReq,
       main_proc_EN_iMemResp,
       main_proc_RDY_dMemReq,
       main_proc_RDY_dMemResp,
       main_proc_RDY_iMemReq,
       main_proc_RDY_iMemResp;

  // ports of submodule main_serialrxQ
  wire [7 : 0] main_serialrxQ_D_IN, main_serialrxQ_D_OUT;
  wire main_serialrxQ_CLR,
       main_serialrxQ_DEQ,
       main_serialrxQ_EMPTY_N,
       main_serialrxQ_ENQ,
       main_serialrxQ_FULL_N;

  // ports of submodule main_serialtxQ
  wire [7 : 0] main_serialtxQ_D_IN, main_serialtxQ_D_OUT;
  wire main_serialtxQ_CLR,
       main_serialtxQ_DEQ,
       main_serialtxQ_EMPTY_N,
       main_serialtxQ_ENQ,
       main_serialtxQ_FULL_N;

  // ports of submodule uart_inQ
  wire [7 : 0] uart_inQ_D_IN, uart_inQ_D_OUT;
  wire uart_inQ_CLR,
       uart_inQ_DEQ,
       uart_inQ_EMPTY_N,
       uart_inQ_ENQ,
       uart_inQ_FULL_N;

  // ports of submodule uart_outQ
  wire [7 : 0] uart_outQ_D_IN, uart_outQ_D_OUT;
  wire uart_outQ_CLR,
       uart_outQ_DEQ,
       uart_outQ_EMPTY_N,
       uart_outQ_ENQ,
       uart_outQ_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_main_dmem_mem_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_main_dmem_mem_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_main_imem_mem_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_main_imem_mem_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_main_procSerialRx,
       WILL_FIRE_RL_main_relayDmemReq,
       WILL_FIRE_RL_main_relayImemReq,
       WILL_FIRE_RL_uart_insample,
       WILL_FIRE_RL_uart_outcntclk;

  // inputs to muxes for submodule ports
  wire [46 : 0] MUX_main_dmem_reqQ_enq_1__VAL_2,
		MUX_main_imem_reqQ_enq_1__VAL_1;
  wire MUX_main_dmem_mem_memory_a_put_1__SEL_1,
       MUX_main_dmem_mem_memory_a_put_1__SEL_2,
       MUX_main_imem_mem_memory_a_put_1__SEL_1;

  // remaining internal signals
  wire [34 : 0] _0_CONCAT_main_serialrxQ_first__36_44_CONCAT_IF_ETC___d447;
  wire [31 : 0] odat__h4470,
		odat__h8357,
		v__h4334,
		v__h8221,
		v__h9547,
		v__h9715,
		wdat__h4468,
		wdat__h8355,
		x__h10329,
		y__h4642,
		y__h8528;
  wire [15 : 0] x__h420, x__h853;
  wire [10 : 0] x__h465, x__h599;
  wire [7 : 0] main_serialCmd_BITS_7_TO_0__q1;
  wire [4 : 0] x__h4604, x__h583, x__h8490;
  wire [3 : 0] x__h990;
  wire [2 : 0] main_dmem_mem_serverAdapterA_cnt_37_PLUS_IF_ma_ETC___d243,
	       main_dmem_mem_serverAdapterB_cnt_96_PLUS_IF_ma_ETC___d302,
	       main_imem_mem_serverAdapterA_cnt_8_PLUS_IF_mai_ETC___d84,
	       main_imem_mem_serverAdapterB_cnt_37_PLUS_IF_ma_ETC___d143;
  wire [1 : 0] main_dmem_reqQ_first__33_BITS_36_TO_35_43_PLUS_ETC___d348,
	       main_imem_reqQ_first__74_BITS_36_TO_35_84_PLUS_ETC___d189;
  wire IF_IF_main_serialCmd_25_BIT_8_26_THEN_main_ser_ETC___d432,
       main_dmem_mem_serverAdapterB_cnt_96_SLT_3_32_A_ETC___d338,
       main_imem_mem_serverAdapterB_cnt_37_SLT_3_73_A_ETC___d179,
       uart_clkcnt_PLUS_1_ULT_2604___d3;

  // value method ftdi_txd
  assign ftdi_txd = uart_txdr ;

  // submodule main_dmem_mem_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) main_dmem_mem_memory(.CLKA(CLK_clk_25mhz),
						   .CLKB(CLK_clk_25mhz),
						   .ADDRA(main_dmem_mem_memory_ADDRA),
						   .ADDRB(main_dmem_mem_memory_ADDRB),
						   .DIA(main_dmem_mem_memory_DIA),
						   .DIB(main_dmem_mem_memory_DIB),
						   .WEA(main_dmem_mem_memory_WEA),
						   .WEB(main_dmem_mem_memory_WEB),
						   .ENA(main_dmem_mem_memory_ENA),
						   .ENB(main_dmem_mem_memory_ENB),
						   .DOA(main_dmem_mem_memory_DOA),
						   .DOB(main_dmem_mem_memory_DOB));

  // submodule main_dmem_mem_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) main_dmem_mem_serverAdapterA_outDataCore(.RST(!`BSV_RESET_VALUE),
								       .CLK(CLK_clk_25mhz),
								       .D_IN(main_dmem_mem_serverAdapterA_outDataCore_D_IN),
								       .ENQ(main_dmem_mem_serverAdapterA_outDataCore_ENQ),
								       .DEQ(main_dmem_mem_serverAdapterA_outDataCore_DEQ),
								       .CLR(main_dmem_mem_serverAdapterA_outDataCore_CLR),
								       .D_OUT(main_dmem_mem_serverAdapterA_outDataCore_D_OUT),
								       .FULL_N(main_dmem_mem_serverAdapterA_outDataCore_FULL_N),
								       .EMPTY_N(main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N));

  // submodule main_dmem_mem_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) main_dmem_mem_serverAdapterB_outDataCore(.RST(!`BSV_RESET_VALUE),
								       .CLK(CLK_clk_25mhz),
								       .D_IN(main_dmem_mem_serverAdapterB_outDataCore_D_IN),
								       .ENQ(main_dmem_mem_serverAdapterB_outDataCore_ENQ),
								       .DEQ(main_dmem_mem_serverAdapterB_outDataCore_DEQ),
								       .CLR(main_dmem_mem_serverAdapterB_outDataCore_CLR),
								       .D_OUT(main_dmem_mem_serverAdapterB_outDataCore_D_OUT),
								       .FULL_N(main_dmem_mem_serverAdapterB_outDataCore_FULL_N),
								       .EMPTY_N(main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N));

  // submodule main_dmem_readOffsetQ
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) main_dmem_readOffsetQ(.RST(!`BSV_RESET_VALUE),
						.CLK(CLK_clk_25mhz),
						.D_IN(main_dmem_readOffsetQ_D_IN),
						.ENQ(main_dmem_readOffsetQ_ENQ),
						.DEQ(main_dmem_readOffsetQ_DEQ),
						.CLR(main_dmem_readOffsetQ_CLR),
						.D_OUT(main_dmem_readOffsetQ_D_OUT),
						.FULL_N(main_dmem_readOffsetQ_FULL_N),
						.EMPTY_N(main_dmem_readOffsetQ_EMPTY_N));

  // submodule main_dmem_reqQ
  FIFO2 #(.width(32'd47),
	  .guarded(1'd1)) main_dmem_reqQ(.RST(!`BSV_RESET_VALUE),
					 .CLK(CLK_clk_25mhz),
					 .D_IN(main_dmem_reqQ_D_IN),
					 .ENQ(main_dmem_reqQ_ENQ),
					 .DEQ(main_dmem_reqQ_DEQ),
					 .CLR(main_dmem_reqQ_CLR),
					 .D_OUT(main_dmem_reqQ_D_OUT),
					 .FULL_N(main_dmem_reqQ_FULL_N),
					 .EMPTY_N(main_dmem_reqQ_EMPTY_N));

  // submodule main_imem_mem_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) main_imem_mem_memory(.CLKA(CLK_clk_25mhz),
						   .CLKB(CLK_clk_25mhz),
						   .ADDRA(main_imem_mem_memory_ADDRA),
						   .ADDRB(main_imem_mem_memory_ADDRB),
						   .DIA(main_imem_mem_memory_DIA),
						   .DIB(main_imem_mem_memory_DIB),
						   .WEA(main_imem_mem_memory_WEA),
						   .WEB(main_imem_mem_memory_WEB),
						   .ENA(main_imem_mem_memory_ENA),
						   .ENB(main_imem_mem_memory_ENB),
						   .DOA(main_imem_mem_memory_DOA),
						   .DOB(main_imem_mem_memory_DOB));

  // submodule main_imem_mem_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) main_imem_mem_serverAdapterA_outDataCore(.RST(!`BSV_RESET_VALUE),
								       .CLK(CLK_clk_25mhz),
								       .D_IN(main_imem_mem_serverAdapterA_outDataCore_D_IN),
								       .ENQ(main_imem_mem_serverAdapterA_outDataCore_ENQ),
								       .DEQ(main_imem_mem_serverAdapterA_outDataCore_DEQ),
								       .CLR(main_imem_mem_serverAdapterA_outDataCore_CLR),
								       .D_OUT(main_imem_mem_serverAdapterA_outDataCore_D_OUT),
								       .FULL_N(main_imem_mem_serverAdapterA_outDataCore_FULL_N),
								       .EMPTY_N(main_imem_mem_serverAdapterA_outDataCore_EMPTY_N));

  // submodule main_imem_mem_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) main_imem_mem_serverAdapterB_outDataCore(.RST(!`BSV_RESET_VALUE),
								       .CLK(CLK_clk_25mhz),
								       .D_IN(main_imem_mem_serverAdapterB_outDataCore_D_IN),
								       .ENQ(main_imem_mem_serverAdapterB_outDataCore_ENQ),
								       .DEQ(main_imem_mem_serverAdapterB_outDataCore_DEQ),
								       .CLR(main_imem_mem_serverAdapterB_outDataCore_CLR),
								       .D_OUT(main_imem_mem_serverAdapterB_outDataCore_D_OUT),
								       .FULL_N(main_imem_mem_serverAdapterB_outDataCore_FULL_N),
								       .EMPTY_N(main_imem_mem_serverAdapterB_outDataCore_EMPTY_N));

  // submodule main_imem_readOffsetQ
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) main_imem_readOffsetQ(.RST(!`BSV_RESET_VALUE),
						.CLK(CLK_clk_25mhz),
						.D_IN(main_imem_readOffsetQ_D_IN),
						.ENQ(main_imem_readOffsetQ_ENQ),
						.DEQ(main_imem_readOffsetQ_DEQ),
						.CLR(main_imem_readOffsetQ_CLR),
						.D_OUT(main_imem_readOffsetQ_D_OUT),
						.FULL_N(main_imem_readOffsetQ_FULL_N),
						.EMPTY_N(main_imem_readOffsetQ_EMPTY_N));

  // submodule main_imem_reqQ
  FIFO2 #(.width(32'd47),
	  .guarded(1'd1)) main_imem_reqQ(.RST(!`BSV_RESET_VALUE),
					 .CLK(CLK_clk_25mhz),
					 .D_IN(main_imem_reqQ_D_IN),
					 .ENQ(main_imem_reqQ_ENQ),
					 .DEQ(main_imem_reqQ_DEQ),
					 .CLR(main_imem_reqQ_CLR),
					 .D_OUT(main_imem_reqQ_D_OUT),
					 .FULL_N(main_imem_reqQ_FULL_N),
					 .EMPTY_N(main_imem_reqQ_EMPTY_N));

  // submodule main_proc
  mkProcessor main_proc(.CLK(CLK_clk_25mhz),
			.RST_N(!`BSV_RESET_VALUE),
			.dMemResp_data(main_proc_dMemResp_data),
			.iMemResp_data(main_proc_iMemResp_data),
			.EN_iMemReq(main_proc_EN_iMemReq),
			.EN_iMemResp(main_proc_EN_iMemResp),
			.EN_dMemReq(main_proc_EN_dMemReq),
			.EN_dMemResp(main_proc_EN_dMemResp),
			.iMemReq(main_proc_iMemReq),
			.RDY_iMemReq(main_proc_RDY_iMemReq),
			.RDY_iMemResp(main_proc_RDY_iMemResp),
			.dMemReq(main_proc_dMemReq),
			.RDY_dMemReq(main_proc_RDY_dMemReq),
			.RDY_dMemResp(main_proc_RDY_dMemResp));

  // submodule main_serialrxQ
  FIFO2 #(.width(32'd8),
	  .guarded(1'd1)) main_serialrxQ(.RST(!`BSV_RESET_VALUE),
					 .CLK(CLK_clk_25mhz),
					 .D_IN(main_serialrxQ_D_IN),
					 .ENQ(main_serialrxQ_ENQ),
					 .DEQ(main_serialrxQ_DEQ),
					 .CLR(main_serialrxQ_CLR),
					 .D_OUT(main_serialrxQ_D_OUT),
					 .FULL_N(main_serialrxQ_FULL_N),
					 .EMPTY_N(main_serialrxQ_EMPTY_N));

  // submodule main_serialtxQ
  FIFO2 #(.width(32'd8),
	  .guarded(1'd1)) main_serialtxQ(.RST(!`BSV_RESET_VALUE),
					 .CLK(CLK_clk_25mhz),
					 .D_IN(main_serialtxQ_D_IN),
					 .ENQ(main_serialtxQ_ENQ),
					 .DEQ(main_serialtxQ_DEQ),
					 .CLR(main_serialtxQ_CLR),
					 .D_OUT(main_serialtxQ_D_OUT),
					 .FULL_N(main_serialtxQ_FULL_N),
					 .EMPTY_N(main_serialtxQ_EMPTY_N));

  // submodule uart_inQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) uart_inQ(.RST(!`BSV_RESET_VALUE),
						  .CLK(CLK_clk_25mhz),
						  .D_IN(uart_inQ_D_IN),
						  .ENQ(uart_inQ_ENQ),
						  .DEQ(uart_inQ_DEQ),
						  .CLR(uart_inQ_CLR),
						  .D_OUT(uart_inQ_D_OUT),
						  .FULL_N(uart_inQ_FULL_N),
						  .EMPTY_N(uart_inQ_EMPTY_N));

  // submodule uart_outQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) uart_outQ(.RST(!`BSV_RESET_VALUE),
						   .CLK(CLK_clk_25mhz),
						   .D_IN(uart_outQ_D_IN),
						   .ENQ(uart_outQ_ENQ),
						   .DEQ(uart_outQ_DEQ),
						   .CLR(uart_outQ_CLR),
						   .D_OUT(uart_outQ_D_OUT),
						   .FULL_N(uart_outQ_FULL_N),
						   .EMPTY_N(uart_outQ_EMPTY_N));

  // rule RL_uart_outcntclk
  assign WILL_FIRE_RL_uart_outcntclk =
	     uart_clkcnt_PLUS_1_ULT_2604___d3 || uart_curoutoff != 5'd0 ||
	     uart_inQ_EMPTY_N ;

  // rule RL_uart_insample
  assign WILL_FIRE_RL_uart_insample =
	     uart_samplecountdown != 16'd0 || uart_bleft != 4'd1 ||
	     uart_outQ_FULL_N ;

  // rule RL_main_relayImemReq
  assign WILL_FIRE_RL_main_relayImemReq =
	     main_proc_RDY_iMemReq && main_imem_reqQ_FULL_N &&
	     (main_imem_mem_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     main_processorStart ;

  // rule RL_main_relayDmemReq
  assign WILL_FIRE_RL_main_relayDmemReq =
	     main_proc_RDY_dMemReq && main_serialtxQ_FULL_N &&
	     main_dmem_reqQ_FULL_N &&
	     (main_dmem_mem_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     main_processorStart ;

  // rule RL_main_procSerialRx
  assign WILL_FIRE_RL_main_procSerialRx =
	     main_serialrxQ_EMPTY_N &&
	     (!main_serialCmd[8] || main_serialCmd_BITS_7_TO_0__q1[0] ||
	      IF_IF_main_serialCmd_25_BIT_8_26_THEN_main_ser_ETC___d432) &&
	     !WILL_FIRE_RL_main_relayDmemReq &&
	     !WILL_FIRE_RL_main_relayImemReq ;

  // rule RL_main_imem_mem_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_main_imem_mem_serverAdapterA_outData_enqAndDeq =
	     main_imem_mem_serverAdapterA_outDataCore_EMPTY_N &&
	     main_imem_mem_serverAdapterA_outDataCore_FULL_N &&
	     main_imem_mem_serverAdapterA_outData_deqCalled_whas &&
	     main_imem_mem_serverAdapterA_outData_enqData_whas ;

  // rule RL_main_imem_mem_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_main_imem_mem_serverAdapterB_outData_enqAndDeq =
	     main_imem_mem_serverAdapterB_outDataCore_EMPTY_N &&
	     main_imem_mem_serverAdapterB_outDataCore_FULL_N &&
	     main_imem_mem_serverAdapterB_outData_deqCalled_whas &&
	     main_imem_mem_serverAdapterB_outData_enqData_whas ;

  // rule RL_main_dmem_mem_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_main_dmem_mem_serverAdapterA_outData_enqAndDeq =
	     main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N &&
	     main_dmem_mem_serverAdapterA_outDataCore_FULL_N &&
	     main_dmem_mem_serverAdapterA_outData_deqCalled_whas &&
	     main_dmem_mem_serverAdapterA_outData_enqData_whas ;

  // rule RL_main_dmem_mem_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_main_dmem_mem_serverAdapterB_outData_enqAndDeq =
	     main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N &&
	     main_dmem_mem_serverAdapterB_outDataCore_FULL_N &&
	     main_dmem_mem_serverAdapterB_outData_deqCalled_whas &&
	     main_dmem_mem_serverAdapterB_outData_enqData_whas ;

  // inputs to muxes for submodule ports
  assign MUX_main_dmem_mem_memory_a_put_1__SEL_1 =
	     WILL_FIRE_RL_main_relayDmemReq &&
	     (!main_proc_dMemReq[0] || main_proc_dMemReq[50:47] != 4'd0) ;
  assign MUX_main_dmem_mem_memory_a_put_1__SEL_2 =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     main_serialCmd_BITS_7_TO_0__q1[1] ;
  assign MUX_main_imem_mem_memory_a_put_1__SEL_1 =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     !main_serialCmd_BITS_7_TO_0__q1[1] ;
  assign MUX_main_dmem_reqQ_enq_1__VAL_2 =
	     { main_dmembytes,
	       _0_CONCAT_main_serialrxQ_first__36_44_CONCAT_IF_ETC___d447 } ;
  assign MUX_main_imem_reqQ_enq_1__VAL_1 =
	     { main_imembytes,
	       _0_CONCAT_main_serialrxQ_first__36_44_CONCAT_IF_ETC___d447 } ;

  // inlined wires
  assign main_imem_mem_serverAdapterA_outData_enqData_whas =
	     (!main_imem_mem_serverAdapterA_s1[0] ||
	      main_imem_mem_serverAdapterA_outDataCore_FULL_N) &&
	     main_imem_mem_serverAdapterA_s1[1] &&
	     main_imem_mem_serverAdapterA_s1[0] ;
  assign main_imem_mem_serverAdapterA_outData_outData_whas =
	     main_imem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	     !main_imem_mem_serverAdapterA_outDataCore_EMPTY_N &&
	     main_imem_mem_serverAdapterA_outData_enqData_whas ;
  assign main_imem_mem_serverAdapterA_cnt_1_whas =
	     MUX_main_imem_mem_memory_a_put_1__SEL_1 ||
	     WILL_FIRE_RL_main_relayImemReq ;
  assign main_imem_mem_serverAdapterA_s1_1_wget = 2'd3 ;
  assign main_imem_mem_serverAdapterB_outData_enqData_whas =
	     (!main_imem_mem_serverAdapterB_s1[0] ||
	      main_imem_mem_serverAdapterB_outDataCore_FULL_N) &&
	     main_imem_mem_serverAdapterB_s1[1] &&
	     main_imem_mem_serverAdapterB_s1[0] ;
  assign main_imem_mem_serverAdapterB_outData_outData_whas =
	     main_imem_mem_serverAdapterB_outDataCore_EMPTY_N ||
	     !main_imem_mem_serverAdapterB_outDataCore_EMPTY_N &&
	     main_imem_mem_serverAdapterB_outData_enqData_whas ;
  assign main_imem_mem_serverAdapterB_cnt_1_whas =
	     main_imem_reqQ_EMPTY_N &&
	     (main_imem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	      main_imem_mem_serverAdapterA_outData_enqData_whas) &&
	     main_imem_mem_serverAdapterB_cnt_37_SLT_3_73_A_ETC___d179 &&
	     (!main_imem_mem_serverAdapterB_writeWithResp_wget[1] ||
	      main_imem_mem_serverAdapterB_writeWithResp_wget[0]) ;
  assign main_imem_mem_serverAdapterB_writeWithResp_wget =
	     main_imem_reqQ_D_OUT[0] ? 2'd2 : 2'd0 ;
  assign main_imem_mem_serverAdapterB_s1_1_wget =
	     { 1'd1,
	       !main_imem_mem_serverAdapterB_writeWithResp_wget[1] ||
	       main_imem_mem_serverAdapterB_writeWithResp_wget[0] } ;
  assign main_dmem_mem_serverAdapterA_outData_enqData_whas =
	     (!main_dmem_mem_serverAdapterA_s1[0] ||
	      main_dmem_mem_serverAdapterA_outDataCore_FULL_N) &&
	     main_dmem_mem_serverAdapterA_s1[1] &&
	     main_dmem_mem_serverAdapterA_s1[0] ;
  assign main_dmem_mem_serverAdapterA_outData_outData_whas =
	     main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	     !main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N &&
	     main_dmem_mem_serverAdapterA_outData_enqData_whas ;
  assign main_dmem_mem_serverAdapterA_cnt_1_whas =
	     MUX_main_dmem_mem_memory_a_put_1__SEL_1 ||
	     MUX_main_dmem_mem_memory_a_put_1__SEL_2 ;
  assign main_dmem_mem_serverAdapterB_outData_enqData_whas =
	     (!main_dmem_mem_serverAdapterB_s1[0] ||
	      main_dmem_mem_serverAdapterB_outDataCore_FULL_N) &&
	     main_dmem_mem_serverAdapterB_s1[1] &&
	     main_dmem_mem_serverAdapterB_s1[0] ;
  assign main_dmem_mem_serverAdapterB_outData_outData_whas =
	     main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N ||
	     !main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N &&
	     main_dmem_mem_serverAdapterB_outData_enqData_whas ;
  assign main_dmem_mem_serverAdapterB_cnt_1_whas =
	     main_dmem_reqQ_EMPTY_N &&
	     (main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	      main_dmem_mem_serverAdapterA_outData_enqData_whas) &&
	     main_dmem_mem_serverAdapterB_cnt_96_SLT_3_32_A_ETC___d338 &&
	     (!main_dmem_mem_serverAdapterB_writeWithResp_wget[1] ||
	      main_dmem_mem_serverAdapterB_writeWithResp_wget[0]) ;
  assign main_dmem_mem_serverAdapterB_writeWithResp_wget =
	     main_dmem_reqQ_D_OUT[0] ? 2'd2 : 2'd0 ;
  assign main_dmem_mem_serverAdapterB_s1_1_wget =
	     { 1'd1,
	       !main_dmem_mem_serverAdapterB_writeWithResp_wget[1] ||
	       main_dmem_mem_serverAdapterB_writeWithResp_wget[0] } ;
  assign main_imem_mem_serverAdapterA_outData_deqCalled_whas =
	     main_imem_reqQ_EMPTY_N &&
	     (main_imem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	      main_imem_mem_serverAdapterA_outData_enqData_whas) &&
	     main_imem_mem_serverAdapterB_cnt_37_SLT_3_73_A_ETC___d179 ;
  assign main_imem_mem_serverAdapterB_outData_deqCalled_whas =
	     main_proc_RDY_iMemResp &&
	     (main_imem_mem_serverAdapterB_outDataCore_EMPTY_N ||
	      main_imem_mem_serverAdapterB_outData_enqData_whas) &&
	     main_imem_mem_serverAdapterB_outData_outData_whas &&
	     main_imem_readOffsetQ_EMPTY_N ;
  assign main_dmem_mem_serverAdapterA_outData_deqCalled_whas =
	     main_dmem_reqQ_EMPTY_N &&
	     (main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	      main_dmem_mem_serverAdapterA_outData_enqData_whas) &&
	     main_dmem_mem_serverAdapterB_cnt_96_SLT_3_32_A_ETC___d338 ;
  assign main_dmem_mem_serverAdapterB_outData_deqCalled_whas =
	     main_proc_RDY_dMemResp &&
	     (main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N ||
	      main_dmem_mem_serverAdapterB_outData_enqData_whas) &&
	     main_dmem_mem_serverAdapterB_outData_outData_whas &&
	     main_dmem_readOffsetQ_EMPTY_N ;

  // register main_dmem_mem_serverAdapterA_cnt
  assign main_dmem_mem_serverAdapterA_cnt_D_IN =
	     main_dmem_mem_serverAdapterA_cnt_37_PLUS_IF_ma_ETC___d243 ;
  assign main_dmem_mem_serverAdapterA_cnt_EN =
	     main_dmem_mem_serverAdapterA_cnt_1_whas ||
	     main_dmem_mem_serverAdapterA_outData_deqCalled_whas ;

  // register main_dmem_mem_serverAdapterA_s1
  assign main_dmem_mem_serverAdapterA_s1_D_IN =
	     { main_dmem_mem_serverAdapterA_cnt_1_whas &&
	       main_imem_mem_serverAdapterA_s1_1_wget[1],
	       main_imem_mem_serverAdapterA_s1_1_wget[0] } ;
  assign main_dmem_mem_serverAdapterA_s1_EN = 1'd1 ;

  // register main_dmem_mem_serverAdapterB_cnt
  assign main_dmem_mem_serverAdapterB_cnt_D_IN =
	     main_dmem_mem_serverAdapterB_cnt_96_PLUS_IF_ma_ETC___d302 ;
  assign main_dmem_mem_serverAdapterB_cnt_EN =
	     main_dmem_mem_serverAdapterB_cnt_1_whas ||
	     main_dmem_mem_serverAdapterB_outData_deqCalled_whas ;

  // register main_dmem_mem_serverAdapterB_s1
  assign main_dmem_mem_serverAdapterB_s1_D_IN =
	     { main_dmem_mem_serverAdapterA_outData_deqCalled_whas &&
	       main_dmem_mem_serverAdapterB_s1_1_wget[1],
	       main_dmem_mem_serverAdapterB_s1_1_wget[0] } ;
  assign main_dmem_mem_serverAdapterB_s1_EN = 1'd1 ;

  // register main_dmembytes
  assign main_dmembytes_D_IN = main_dmembytes + 12'd1 ;
  assign main_dmembytes_EN =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     main_serialCmd_BITS_7_TO_0__q1[1] &&
	     !main_serialCmd_BITS_7_TO_0__q1[2] ;

  // register main_imem_mem_serverAdapterA_cnt
  assign main_imem_mem_serverAdapterA_cnt_D_IN =
	     main_imem_mem_serverAdapterA_cnt_8_PLUS_IF_mai_ETC___d84 ;
  assign main_imem_mem_serverAdapterA_cnt_EN =
	     main_imem_mem_serverAdapterA_cnt_1_whas ||
	     main_imem_mem_serverAdapterA_outData_deqCalled_whas ;

  // register main_imem_mem_serverAdapterA_s1
  assign main_imem_mem_serverAdapterA_s1_D_IN =
	     { main_imem_mem_serverAdapterA_cnt_1_whas &&
	       main_imem_mem_serverAdapterA_s1_1_wget[1],
	       main_imem_mem_serverAdapterA_s1_1_wget[0] } ;
  assign main_imem_mem_serverAdapterA_s1_EN = 1'd1 ;

  // register main_imem_mem_serverAdapterB_cnt
  assign main_imem_mem_serverAdapterB_cnt_D_IN =
	     main_imem_mem_serverAdapterB_cnt_37_PLUS_IF_ma_ETC___d143 ;
  assign main_imem_mem_serverAdapterB_cnt_EN =
	     main_imem_mem_serverAdapterB_cnt_1_whas ||
	     main_imem_mem_serverAdapterB_outData_deqCalled_whas ;

  // register main_imem_mem_serverAdapterB_s1
  assign main_imem_mem_serverAdapterB_s1_D_IN =
	     { main_imem_mem_serverAdapterA_outData_deqCalled_whas &&
	       main_imem_mem_serverAdapterB_s1_1_wget[1],
	       main_imem_mem_serverAdapterB_s1_1_wget[0] } ;
  assign main_imem_mem_serverAdapterB_s1_EN = 1'd1 ;

  // register main_imembytes
  assign main_imembytes_D_IN = main_imembytes + 12'd1 ;
  assign main_imembytes_EN =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     !main_serialCmd_BITS_7_TO_0__q1[1] &&
	     !main_serialCmd_BITS_7_TO_0__q1[2] ;

  // register main_processorStart
  assign main_processorStart_D_IN = 1'd1 ;
  assign main_processorStart_EN =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     main_serialCmd_BITS_7_TO_0__q1[0] ;

  // register main_serialCmd
  assign main_serialCmd_D_IN = { !main_serialCmd[8], main_serialrxQ_D_OUT } ;
  assign main_serialCmd_EN = WILL_FIRE_RL_main_procSerialRx ;

  // register uart_bleft
  assign uart_bleft_D_IN =
	     (uart_bleft == 4'd0 && !(uart_rxin != 4'd0)) ? 4'd9 : x__h990 ;
  assign uart_bleft_EN =
	     WILL_FIRE_RL_uart_insample &&
	     (uart_bleft == 4'd0 && !(uart_rxin != 4'd0) ||
	      uart_bleft != 4'd0 && uart_samplecountdown == 16'd0) ;

  // register uart_clkcnt
  assign uart_clkcnt_D_IN =
	     uart_clkcnt_PLUS_1_ULT_2604___d3 ? x__h420 : 16'd0 ;
  assign uart_clkcnt_EN = WILL_FIRE_RL_uart_outcntclk ;

  // register uart_curoutd
  assign uart_curoutd_D_IN = (uart_curoutoff == 5'd0) ? x__h599 : x__h465 ;
  assign uart_curoutd_EN =
	     WILL_FIRE_RL_uart_outcntclk &&
	     !uart_clkcnt_PLUS_1_ULT_2604___d3 ;

  // register uart_curoutoff
  assign uart_curoutoff_D_IN = (uart_curoutoff == 5'd0) ? 5'd11 : x__h583 ;
  assign uart_curoutoff_EN =
	     WILL_FIRE_RL_uart_outcntclk &&
	     !uart_clkcnt_PLUS_1_ULT_2604___d3 ;

  // register uart_outword
  assign uart_outword_D_IN = { uart_rxin != 4'd0, uart_outword[7:1] } ;
  assign uart_outword_EN =
	     WILL_FIRE_RL_uart_insample && uart_bleft != 4'd0 &&
	     uart_samplecountdown == 16'd0 ;

  // register uart_rxin
  assign uart_rxin_D_IN = { ftdi_rxd, uart_rxin[3:1] } ;
  assign uart_rxin_EN = 1'd1 ;

  // register uart_samplecountdown
  assign uart_samplecountdown_D_IN =
	     (uart_bleft == 4'd0 && !(uart_rxin != 4'd0)) ?
	       16'd3906 :
	       ((uart_samplecountdown == 16'd0) ? 16'd2604 : x__h853) ;
  assign uart_samplecountdown_EN =
	     WILL_FIRE_RL_uart_insample &&
	     (!(uart_rxin != 4'd0) || uart_bleft != 4'd0) ;

  // register uart_txdr
  assign uart_txdr_D_IN = uart_curoutd[0] ;
  assign uart_txdr_EN =
	     WILL_FIRE_RL_uart_outcntclk &&
	     !uart_clkcnt_PLUS_1_ULT_2604___d3 &&
	     uart_curoutoff != 5'd0 ;

  // submodule main_dmem_mem_memory
  assign main_dmem_mem_memory_ADDRA =
	     MUX_main_dmem_mem_memory_a_put_1__SEL_1 ?
	       main_proc_dMemReq[46:37] :
	       main_dmembytes[11:2] ;
  assign main_dmem_mem_memory_ADDRB = main_dmem_reqQ_D_OUT[46:37] ;
  assign main_dmem_mem_memory_DIA =
	     MUX_main_dmem_mem_memory_a_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       32'hAAAAAAAA /* unspecified value */  ;
  assign main_dmem_mem_memory_DIB = wdat__h8355 | odat__h8357 ;
  assign main_dmem_mem_memory_WEA = 1'd0 ;
  assign main_dmem_mem_memory_WEB = main_dmem_reqQ_D_OUT[0] ;
  assign main_dmem_mem_memory_ENA =
	     WILL_FIRE_RL_main_relayDmemReq &&
	     (!main_proc_dMemReq[0] || main_proc_dMemReq[50:47] != 4'd0) ||
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     main_serialCmd_BITS_7_TO_0__q1[1] ;
  assign main_dmem_mem_memory_ENB =
	     main_dmem_mem_serverAdapterA_outData_deqCalled_whas ;

  // submodule main_dmem_mem_serverAdapterA_outDataCore
  assign main_dmem_mem_serverAdapterA_outDataCore_D_IN =
	     main_dmem_mem_memory_DOA ;
  assign main_dmem_mem_serverAdapterA_outDataCore_ENQ =
	     WILL_FIRE_RL_main_dmem_mem_serverAdapterA_outData_enqAndDeq ||
	     main_dmem_mem_serverAdapterA_outDataCore_FULL_N &&
	     !main_dmem_mem_serverAdapterA_outData_deqCalled_whas &&
	     main_dmem_mem_serverAdapterA_outData_enqData_whas ;
  assign main_dmem_mem_serverAdapterA_outDataCore_DEQ =
	     WILL_FIRE_RL_main_dmem_mem_serverAdapterA_outData_enqAndDeq ||
	     main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N &&
	     main_dmem_mem_serverAdapterA_outData_deqCalled_whas &&
	     !main_dmem_mem_serverAdapterA_outData_enqData_whas ;
  assign main_dmem_mem_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule main_dmem_mem_serverAdapterB_outDataCore
  assign main_dmem_mem_serverAdapterB_outDataCore_D_IN =
	     main_dmem_mem_memory_DOB ;
  assign main_dmem_mem_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_main_dmem_mem_serverAdapterB_outData_enqAndDeq ||
	     main_dmem_mem_serverAdapterB_outDataCore_FULL_N &&
	     !main_dmem_mem_serverAdapterB_outData_deqCalled_whas &&
	     main_dmem_mem_serverAdapterB_outData_enqData_whas ;
  assign main_dmem_mem_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_main_dmem_mem_serverAdapterB_outData_enqAndDeq ||
	     main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N &&
	     main_dmem_mem_serverAdapterB_outData_deqCalled_whas &&
	     !main_dmem_mem_serverAdapterB_outData_enqData_whas ;
  assign main_dmem_mem_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule main_dmem_readOffsetQ
  assign main_dmem_readOffsetQ_D_IN = main_dmem_reqQ_D_OUT[36:35] ;
  assign main_dmem_readOffsetQ_ENQ =
	     main_dmem_reqQ_EMPTY_N &&
	     (main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	      main_dmem_mem_serverAdapterA_outData_enqData_whas) &&
	     main_dmem_mem_serverAdapterB_cnt_96_SLT_3_32_A_ETC___d338 &&
	     !main_dmem_reqQ_D_OUT[0] ;
  assign main_dmem_readOffsetQ_DEQ =
	     main_dmem_mem_serverAdapterB_outData_deqCalled_whas ;
  assign main_dmem_readOffsetQ_CLR = 1'b0 ;

  // submodule main_dmem_reqQ
  assign main_dmem_reqQ_D_IN =
	     MUX_main_dmem_mem_memory_a_put_1__SEL_1 ?
	       main_proc_dMemReq[46:0] :
	       MUX_main_dmem_reqQ_enq_1__VAL_2 ;
  assign main_dmem_reqQ_ENQ =
	     WILL_FIRE_RL_main_relayDmemReq &&
	     (!main_proc_dMemReq[0] || main_proc_dMemReq[50:47] != 4'd0) ||
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     main_serialCmd_BITS_7_TO_0__q1[1] ;
  assign main_dmem_reqQ_DEQ =
	     main_dmem_mem_serverAdapterA_outData_deqCalled_whas ;
  assign main_dmem_reqQ_CLR = 1'b0 ;

  // submodule main_imem_mem_memory
  assign main_imem_mem_memory_ADDRA =
	     MUX_main_imem_mem_memory_a_put_1__SEL_1 ?
	       main_imembytes[11:2] :
	       main_proc_iMemReq[46:37] ;
  assign main_imem_mem_memory_ADDRB = main_imem_reqQ_D_OUT[46:37] ;
  assign main_imem_mem_memory_DIA =
	     MUX_main_imem_mem_memory_a_put_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       32'hAAAAAAAA /* unspecified value */  ;
  assign main_imem_mem_memory_DIB = wdat__h4468 | odat__h4470 ;
  assign main_imem_mem_memory_WEA = 1'd0 ;
  assign main_imem_mem_memory_WEB = main_imem_reqQ_D_OUT[0] ;
  assign main_imem_mem_memory_ENA =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     !main_serialCmd_BITS_7_TO_0__q1[1] ||
	     WILL_FIRE_RL_main_relayImemReq ;
  assign main_imem_mem_memory_ENB =
	     main_imem_mem_serverAdapterA_outData_deqCalled_whas ;

  // submodule main_imem_mem_serverAdapterA_outDataCore
  assign main_imem_mem_serverAdapterA_outDataCore_D_IN =
	     main_imem_mem_memory_DOA ;
  assign main_imem_mem_serverAdapterA_outDataCore_ENQ =
	     WILL_FIRE_RL_main_imem_mem_serverAdapterA_outData_enqAndDeq ||
	     main_imem_mem_serverAdapterA_outDataCore_FULL_N &&
	     !main_imem_mem_serverAdapterA_outData_deqCalled_whas &&
	     main_imem_mem_serverAdapterA_outData_enqData_whas ;
  assign main_imem_mem_serverAdapterA_outDataCore_DEQ =
	     WILL_FIRE_RL_main_imem_mem_serverAdapterA_outData_enqAndDeq ||
	     main_imem_mem_serverAdapterA_outDataCore_EMPTY_N &&
	     main_imem_mem_serverAdapterA_outData_deqCalled_whas &&
	     !main_imem_mem_serverAdapterA_outData_enqData_whas ;
  assign main_imem_mem_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule main_imem_mem_serverAdapterB_outDataCore
  assign main_imem_mem_serverAdapterB_outDataCore_D_IN =
	     main_imem_mem_memory_DOB ;
  assign main_imem_mem_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_main_imem_mem_serverAdapterB_outData_enqAndDeq ||
	     main_imem_mem_serverAdapterB_outDataCore_FULL_N &&
	     !main_imem_mem_serverAdapterB_outData_deqCalled_whas &&
	     main_imem_mem_serverAdapterB_outData_enqData_whas ;
  assign main_imem_mem_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_main_imem_mem_serverAdapterB_outData_enqAndDeq ||
	     main_imem_mem_serverAdapterB_outDataCore_EMPTY_N &&
	     main_imem_mem_serverAdapterB_outData_deqCalled_whas &&
	     !main_imem_mem_serverAdapterB_outData_enqData_whas ;
  assign main_imem_mem_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule main_imem_readOffsetQ
  assign main_imem_readOffsetQ_D_IN = main_imem_reqQ_D_OUT[36:35] ;
  assign main_imem_readOffsetQ_ENQ =
	     main_imem_reqQ_EMPTY_N &&
	     (main_imem_mem_serverAdapterA_outDataCore_EMPTY_N ||
	      main_imem_mem_serverAdapterA_outData_enqData_whas) &&
	     main_imem_mem_serverAdapterB_cnt_37_SLT_3_73_A_ETC___d179 &&
	     !main_imem_reqQ_D_OUT[0] ;
  assign main_imem_readOffsetQ_DEQ =
	     main_imem_mem_serverAdapterB_outData_deqCalled_whas ;
  assign main_imem_readOffsetQ_CLR = 1'b0 ;

  // submodule main_imem_reqQ
  assign main_imem_reqQ_D_IN =
	     MUX_main_imem_mem_memory_a_put_1__SEL_1 ?
	       MUX_main_imem_reqQ_enq_1__VAL_1 :
	       main_proc_iMemReq[46:0] ;
  assign main_imem_reqQ_ENQ =
	     WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	     !main_serialCmd_BITS_7_TO_0__q1[0] &&
	     !main_serialCmd_BITS_7_TO_0__q1[1] ||
	     WILL_FIRE_RL_main_relayImemReq ;
  assign main_imem_reqQ_DEQ =
	     main_imem_mem_serverAdapterA_outData_deqCalled_whas ;
  assign main_imem_reqQ_CLR = 1'b0 ;

  // submodule main_proc
  assign main_proc_dMemResp_data = v__h9715 >> main_dmem_readOffsetQ_D_OUT ;
  assign main_proc_iMemResp_data = v__h9547 >> main_imem_readOffsetQ_D_OUT ;
  assign main_proc_EN_iMemReq = WILL_FIRE_RL_main_relayImemReq ;
  assign main_proc_EN_iMemResp =
	     main_proc_RDY_iMemResp &&
	     (main_imem_mem_serverAdapterB_outDataCore_EMPTY_N ||
	      main_imem_mem_serverAdapterB_outData_enqData_whas) &&
	     main_imem_mem_serverAdapterB_outData_outData_whas &&
	     main_imem_readOffsetQ_EMPTY_N ;
  assign main_proc_EN_dMemReq = WILL_FIRE_RL_main_relayDmemReq ;
  assign main_proc_EN_dMemResp =
	     main_proc_RDY_dMemResp &&
	     (main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N ||
	      main_dmem_mem_serverAdapterB_outData_enqData_whas) &&
	     main_dmem_mem_serverAdapterB_outData_outData_whas &&
	     main_dmem_readOffsetQ_EMPTY_N ;

  // submodule main_serialrxQ
  assign main_serialrxQ_D_IN = uart_outQ_D_OUT ;
  assign main_serialrxQ_ENQ = uart_outQ_EMPTY_N && main_serialrxQ_FULL_N ;
  assign main_serialrxQ_DEQ = WILL_FIRE_RL_main_procSerialRx ;
  assign main_serialrxQ_CLR = 1'b0 ;

  // submodule main_serialtxQ
  assign main_serialtxQ_D_IN = main_proc_dMemReq[10:3] ;
  assign main_serialtxQ_ENQ =
	     WILL_FIRE_RL_main_relayDmemReq && main_proc_dMemReq[0] &&
	     main_proc_dMemReq[50:47] == 4'd0 ;
  assign main_serialtxQ_DEQ = main_serialtxQ_EMPTY_N && uart_inQ_FULL_N ;
  assign main_serialtxQ_CLR = 1'b0 ;

  // submodule uart_inQ
  assign uart_inQ_D_IN = main_serialtxQ_D_OUT ;
  assign uart_inQ_ENQ = main_serialtxQ_EMPTY_N && uart_inQ_FULL_N ;
  assign uart_inQ_DEQ =
	     WILL_FIRE_RL_uart_outcntclk &&
	     !uart_clkcnt_PLUS_1_ULT_2604___d3 &&
	     uart_curoutoff == 5'd0 ;
  assign uart_inQ_CLR = 1'b0 ;

  // submodule uart_outQ
  assign uart_outQ_D_IN = uart_outword ;
  assign uart_outQ_ENQ =
	     WILL_FIRE_RL_uart_insample && uart_samplecountdown == 16'd0 &&
	     uart_bleft == 4'd1 ;
  assign uart_outQ_DEQ = uart_outQ_EMPTY_N && main_serialrxQ_FULL_N ;
  assign uart_outQ_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_main_serialCmd_25_BIT_8_26_THEN_main_ser_ETC___d432 =
	     main_serialCmd_BITS_7_TO_0__q1[1] ?
	       main_dmem_reqQ_FULL_N &&
	       (main_dmem_mem_serverAdapterA_cnt ^ 3'h4) < 3'd7 :
	       main_imem_reqQ_FULL_N &&
	       (main_imem_mem_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign _0_CONCAT_main_serialrxQ_first__36_44_CONCAT_IF_ETC___d447 =
	     { x__h10329, main_serialCmd_BITS_7_TO_0__q1[2] ? 3'd0 : 3'd1 } ;
  assign main_dmem_mem_serverAdapterA_cnt_37_PLUS_IF_ma_ETC___d243 =
	     main_dmem_mem_serverAdapterA_cnt +
	     (main_dmem_mem_serverAdapterA_cnt_1_whas ? 3'd1 : 3'd0) +
	     (main_dmem_mem_serverAdapterA_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign main_dmem_mem_serverAdapterB_cnt_96_PLUS_IF_ma_ETC___d302 =
	     main_dmem_mem_serverAdapterB_cnt +
	     (main_dmem_mem_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (main_dmem_mem_serverAdapterB_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign main_dmem_mem_serverAdapterB_cnt_96_SLT_3_32_A_ETC___d338 =
	     (main_dmem_mem_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     (main_dmem_reqQ_D_OUT[0] ?
		main_dmem_mem_serverAdapterA_outData_outData_whas :
		main_dmem_readOffsetQ_FULL_N) ;
  assign main_dmem_reqQ_first__33_BITS_36_TO_35_43_PLUS_ETC___d348 =
	     main_dmem_reqQ_D_OUT[36:35] + main_dmem_reqQ_D_OUT[2:1] ;
  assign main_imem_mem_serverAdapterA_cnt_8_PLUS_IF_mai_ETC___d84 =
	     main_imem_mem_serverAdapterA_cnt +
	     (main_imem_mem_serverAdapterA_cnt_1_whas ? 3'd1 : 3'd0) +
	     (main_imem_mem_serverAdapterA_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign main_imem_mem_serverAdapterB_cnt_37_PLUS_IF_ma_ETC___d143 =
	     main_imem_mem_serverAdapterB_cnt +
	     (main_imem_mem_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (main_imem_mem_serverAdapterB_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign main_imem_mem_serverAdapterB_cnt_37_SLT_3_73_A_ETC___d179 =
	     (main_imem_mem_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     (main_imem_reqQ_D_OUT[0] ?
		main_imem_mem_serverAdapterA_outData_outData_whas :
		main_imem_readOffsetQ_FULL_N) ;
  assign main_imem_reqQ_first__74_BITS_36_TO_35_84_PLUS_ETC___d189 =
	     main_imem_reqQ_D_OUT[36:35] + main_imem_reqQ_D_OUT[2:1] ;
  assign main_serialCmd_BITS_7_TO_0__q1 = main_serialCmd[7:0] ;
  assign odat__h4470 = v__h4334 & y__h4642 ;
  assign odat__h8357 = v__h8221 & y__h8528 ;
  assign uart_clkcnt_PLUS_1_ULT_2604___d3 = x__h420 < 16'd2604 ;
  assign v__h4334 =
	     main_imem_mem_serverAdapterA_outDataCore_EMPTY_N ?
	       main_imem_mem_serverAdapterA_outDataCore_D_OUT :
	       main_imem_mem_memory_DOA ;
  assign v__h8221 =
	     main_dmem_mem_serverAdapterA_outDataCore_EMPTY_N ?
	       main_dmem_mem_serverAdapterA_outDataCore_D_OUT :
	       main_dmem_mem_memory_DOA ;
  assign v__h9547 =
	     main_imem_mem_serverAdapterB_outDataCore_EMPTY_N ?
	       main_imem_mem_serverAdapterB_outDataCore_D_OUT :
	       main_imem_mem_memory_DOB ;
  assign v__h9715 =
	     main_dmem_mem_serverAdapterB_outDataCore_EMPTY_N ?
	       main_dmem_mem_serverAdapterB_outDataCore_D_OUT :
	       main_dmem_mem_memory_DOB ;
  assign wdat__h4468 = main_imem_reqQ_D_OUT[34:3] << x__h4604 ;
  assign wdat__h8355 = main_dmem_reqQ_D_OUT[34:3] << x__h8490 ;
  assign x__h10329 = { 24'd0, main_serialrxQ_D_OUT } ;
  assign x__h420 = uart_clkcnt + 16'd1 ;
  assign x__h4604 = { main_imem_reqQ_D_OUT[36:35], 3'd0 } ;
  assign x__h465 = { 1'd1, uart_curoutd[10:1] } ;
  assign x__h583 = uart_curoutoff - 5'd1 ;
  assign x__h599 = { 2'b11, uart_inQ_D_OUT, 1'b0 } ;
  assign x__h8490 = { main_dmem_reqQ_D_OUT[36:35], 3'd0 } ;
  assign x__h853 = uart_samplecountdown - 16'd1 ;
  assign x__h990 = uart_bleft - 4'd1 ;
  assign y__h4642 =
	     { (main_imem_reqQ_first__74_BITS_36_TO_35_84_PLUS_ETC___d189 ==
		2'd3) ?
		 8'd0 :
		 8'd255,
	       (main_imem_reqQ_D_OUT[36:35] != 2'd3 &&
		main_imem_reqQ_first__74_BITS_36_TO_35_84_PLUS_ETC___d189 >=
		2'd2) ?
		 8'd0 :
		 8'd255,
	       (main_imem_reqQ_D_OUT[36:35] <= 2'd1 &&
		main_imem_reqQ_first__74_BITS_36_TO_35_84_PLUS_ETC___d189 !=
		2'd0) ?
		 8'd0 :
		 8'd255,
	       (main_imem_reqQ_D_OUT[36:35] == 2'd0) ? 8'd0 : 8'd255 } ;
  assign y__h8528 =
	     { (main_dmem_reqQ_first__33_BITS_36_TO_35_43_PLUS_ETC___d348 ==
		2'd3) ?
		 8'd0 :
		 8'd255,
	       (main_dmem_reqQ_D_OUT[36:35] != 2'd3 &&
		main_dmem_reqQ_first__33_BITS_36_TO_35_43_PLUS_ETC___d348 >=
		2'd2) ?
		 8'd0 :
		 8'd255,
	       (main_dmem_reqQ_D_OUT[36:35] <= 2'd1 &&
		main_dmem_reqQ_first__33_BITS_36_TO_35_43_PLUS_ETC___d348 !=
		2'd0) ?
		 8'd0 :
		 8'd255,
	       (main_dmem_reqQ_D_OUT[36:35] == 2'd0) ? 8'd0 : 8'd255 } ;

  // handling of inlined registers

  always@(posedge CLK_clk_25mhz)
  begin
    if (!`BSV_RESET_VALUE == `BSV_RESET_VALUE)
      begin
        main_dmem_mem_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	main_dmem_mem_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	main_dmem_mem_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	main_dmem_mem_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	main_dmembytes <= `BSV_ASSIGNMENT_DELAY 12'd0;
	main_imem_mem_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	main_imem_mem_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	main_imem_mem_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	main_imem_mem_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	main_imembytes <= `BSV_ASSIGNMENT_DELAY 12'd0;
	main_processorStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_serialCmd <= `BSV_ASSIGNMENT_DELAY 9'd170;
	uart_bleft <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_clkcnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	uart_curoutd <= `BSV_ASSIGNMENT_DELAY 11'd0;
	uart_curoutoff <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_outword <= `BSV_ASSIGNMENT_DELAY 8'd0;
	uart_rxin <= `BSV_ASSIGNMENT_DELAY 4'b1111;
	uart_samplecountdown <= `BSV_ASSIGNMENT_DELAY 16'd0;
	uart_txdr <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (main_dmem_mem_serverAdapterA_cnt_EN)
	  main_dmem_mem_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      main_dmem_mem_serverAdapterA_cnt_D_IN;
	if (main_dmem_mem_serverAdapterA_s1_EN)
	  main_dmem_mem_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      main_dmem_mem_serverAdapterA_s1_D_IN;
	if (main_dmem_mem_serverAdapterB_cnt_EN)
	  main_dmem_mem_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      main_dmem_mem_serverAdapterB_cnt_D_IN;
	if (main_dmem_mem_serverAdapterB_s1_EN)
	  main_dmem_mem_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      main_dmem_mem_serverAdapterB_s1_D_IN;
	if (main_dmembytes_EN)
	  main_dmembytes <= `BSV_ASSIGNMENT_DELAY main_dmembytes_D_IN;
	if (main_imem_mem_serverAdapterA_cnt_EN)
	  main_imem_mem_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      main_imem_mem_serverAdapterA_cnt_D_IN;
	if (main_imem_mem_serverAdapterA_s1_EN)
	  main_imem_mem_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      main_imem_mem_serverAdapterA_s1_D_IN;
	if (main_imem_mem_serverAdapterB_cnt_EN)
	  main_imem_mem_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      main_imem_mem_serverAdapterB_cnt_D_IN;
	if (main_imem_mem_serverAdapterB_s1_EN)
	  main_imem_mem_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      main_imem_mem_serverAdapterB_s1_D_IN;
	if (main_imembytes_EN)
	  main_imembytes <= `BSV_ASSIGNMENT_DELAY main_imembytes_D_IN;
	if (main_processorStart_EN)
	  main_processorStart <= `BSV_ASSIGNMENT_DELAY
	      main_processorStart_D_IN;
	if (main_serialCmd_EN)
	  main_serialCmd <= `BSV_ASSIGNMENT_DELAY main_serialCmd_D_IN;
	if (uart_bleft_EN)
	  uart_bleft <= `BSV_ASSIGNMENT_DELAY uart_bleft_D_IN;
	if (uart_clkcnt_EN)
	  uart_clkcnt <= `BSV_ASSIGNMENT_DELAY uart_clkcnt_D_IN;
	if (uart_curoutd_EN)
	  uart_curoutd <= `BSV_ASSIGNMENT_DELAY uart_curoutd_D_IN;
	if (uart_curoutoff_EN)
	  uart_curoutoff <= `BSV_ASSIGNMENT_DELAY uart_curoutoff_D_IN;
	if (uart_outword_EN)
	  uart_outword <= `BSV_ASSIGNMENT_DELAY uart_outword_D_IN;
	if (uart_rxin_EN) uart_rxin <= `BSV_ASSIGNMENT_DELAY uart_rxin_D_IN;
	if (uart_samplecountdown_EN)
	  uart_samplecountdown <= `BSV_ASSIGNMENT_DELAY
	      uart_samplecountdown_D_IN;
	if (uart_txdr_EN) uart_txdr <= `BSV_ASSIGNMENT_DELAY uart_txdr_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    main_dmem_mem_serverAdapterA_cnt = 3'h2;
    main_dmem_mem_serverAdapterA_s1 = 2'h2;
    main_dmem_mem_serverAdapterB_cnt = 3'h2;
    main_dmem_mem_serverAdapterB_s1 = 2'h2;
    main_dmembytes = 12'hAAA;
    main_imem_mem_serverAdapterA_cnt = 3'h2;
    main_imem_mem_serverAdapterA_s1 = 2'h2;
    main_imem_mem_serverAdapterB_cnt = 3'h2;
    main_imem_mem_serverAdapterB_s1 = 2'h2;
    main_imembytes = 12'hAAA;
    main_processorStart = 1'h0;
    main_serialCmd = 9'h0AA;
    uart_bleft = 4'hA;
    uart_clkcnt = 16'hAAAA;
    uart_curoutd = 11'h2AA;
    uart_curoutoff = 5'h0A;
    uart_outword = 8'hAA;
    uart_rxin = 4'hA;
    uart_samplecountdown = 16'hAAAA;
    uart_txdr = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK_clk_25mhz)
  begin
    #0;
    if (WILL_FIRE_RL_main_relayImemReq)
      $write("imem req to %d %d\n",
	     main_proc_iMemReq[50:35],
	     main_proc_iMemReq[2:1]);
    if (WILL_FIRE_RL_main_relayDmemReq && main_proc_dMemReq[0] &&
	main_proc_dMemReq[50:47] == 4'd0)
      $write("!!!! %x %x\n",
	     main_proc_dMemReq[50:35],
	     main_proc_dMemReq[34:3]);
    if (WILL_FIRE_RL_main_procSerialRx && main_serialCmd[8] &&
	main_serialCmd_BITS_7_TO_0__q1[0])
      $write("Processor starting\n");
    if (main_imem_mem_serverAdapterA_s1[1] &&
	!main_imem_mem_serverAdapterA_outDataCore_FULL_N)
      $display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (main_imem_mem_serverAdapterB_s1[1] &&
	!main_imem_mem_serverAdapterB_outDataCore_FULL_N)
      $display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (main_dmem_mem_serverAdapterA_s1[1] &&
	!main_dmem_mem_serverAdapterA_outDataCore_FULL_N)
      $display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (main_dmem_mem_serverAdapterB_s1[1] &&
	!main_dmem_mem_serverAdapterB_outDataCore_FULL_N)
      $display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkTop

